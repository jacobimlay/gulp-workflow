{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","content/js/src/app.js","app.min.js","content/js/vendor/three.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","THREE","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","render","requestAnimationFrame","rotation","x","y","../vendor/three.js",2,"REVISION","define","amd","undefined","self","cancelAnimationFrame","lastTime","vendors","setTimeout","callback","currTime","Date","now","timeToCall","Math","max","id","clearTimeout","performance","start","Number","EPSILON","pow","sign","Function","prototype","name","Object","defineProperty","get","this","toString","match","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","LoopOnce","LoopRepeat","LoopPingPong","Projector","console","error","projectVector","vector","warn","project","unprojectVector","unproject","pickingRay","CanvasRenderer","createElement","clear","setClearColor","Color","arguments","fromArray","set","constructor","g","b","value","copy","setHex","setStyle","hex","floor","setRGB","setHSL","hue2rgb","p","q","h","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","m","exec","components","min","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","c","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","_x","_y","_z","_w",{"end":{"file":"?","comments_before":[],"nlb":false,"endpos":20194,"endcol":6,"endline":894,"pos":20193,"col":5,"line":894,"value":"x","type":"name"},"start":{"file":"?","comments_before":[],"nlb":false,"endpos":20194,"endcol":6,"endline":894,"pos":20193,"col":5,"line":894,"value":"x","type":"name"},"name":"x"},"onChangeCallback","quaternion","setFromEuler","euler","update","Euler","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","EPS","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","ratioA","ratioB","onChange","qa","qm","Vector2","width","height","setX","setY","setComponent","index","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","scalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","distanceTo","distanceToSquared","dx","dy","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","matrix","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","dz","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","setFromMatrixPosition","getScaleFromMatrix","setFromMatrixScale","getColumnFromMatrix","setFromMatrixColumn","sx","sy","sz","me","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","PI","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","atan2","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","end","line","result","distanceSq","distance","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","box","empty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromObject","object","scope","updateMatrixWorld","traverse","node","Geometry","vertices","BufferGeometry","attributes","positions","getBoundingSphere","Sphere","radius","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","multiplyVector3Array","applyToVector3Array","j","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnInvertible","det","msg","transpose","tmp","flattenToArrayOffset","getNormalMatrix","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","extractPosition","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","target","up","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","crossVector","getPosition","setPosition","rotateX","rotateY","rotateZ","rotateByAxis","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","isIntersectionSphere","sphere","intersectSphere","tca","d2","radius2","thc","t0","t1","isIntersectionPlane","plane","distToPoint","denominator","distanceToPlane","constant","intersectPlane","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","matrix4","optionalCenter","maxRadiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","negRadius","intersectsBox","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startSign","endSign","intersectLine","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","newNormal","newCoplanarPoint","generateUUID","chars","split","uuid","Array","rnd","random","join","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degreeToRadiansFactor","degrees","radToDeg","radianToDegreesFactor","radians","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Channels","mask","channel","enable","toggle","disable","Clock","autoStart","startTime","oldTime","elapsedTime","running","stop","getElapsedTime","getDelta","newTime","EventDispatcher","apply","addEventListener","hasEventListener","removeEventListener","dispatchEvent","type","listener","_listeners","listeners","indexOf","listenerArray","splice","event","descSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","onRotationChange","onQuaternionChange","Object3DIdCount","parent","channels","DefaultUp","enumerable","modelViewMatrix","rotationAutoUpdate","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","eulerOrder","useQuaternion","renderDepth","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","rotateOnAxis","q1","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getChildByName","getObjectByName","getObjectById","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","extractFromCache","cache","values","key","data","metadata","isRootObject","output","geometries","materials","textures","images","version","generator","JSON","stringify","source","parse","Face3","materialIndex","vertexNormals","vertexColors","Face4","BufferAttribute","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","create","InterleavedBuffer","stride","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","computeBoundingBox","obj","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","uv","uv2","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precisionPoints","precision","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","enabled","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","hasFaceVertexUv2","morphTargetsLength","morphTargetsPosition","morphNormalsLength","morphTargetsNormal","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","addIndex","setIndex","getIndex","addAttribute","getAttribute","removeAttribute","drawcalls","offsets","addDrawCall","indexOffset","addGroup","clearDrawCalls","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","bb","isNaN","pA","pB","pC","normalizeNormals","computeOffsets","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","AnimationAction","clip","timeScale","loop","localRoot","loopCount","actionTime","clipTime","propertyBindings","setLocalRoot","updateTime","clipDeltaTime","previousClipTime","previousLoopCount","duration","mixer","action","newClipTime","loopDelta","syncWith","warpToDuration","init","time","clipResults","getAt","getTimeScaleAt","getWeightAt","AnimationClip","tracks","track","keys","trim","optimize","results","CreateFromMorphTargetSequence","morphTargetSequence","fps","numMorphTargets","KeyframeTrack","keyComparer","NumberKeyframeTrack","findByName","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","json","parseAnimation","animation","bones","nodeName","convertTrack","trackName","animationKeys","propertyName","trackType","animationKeyToValueFunc","animationKey","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","boneName","positionTrack","VectorKeyframeTrack","pos","quaternionTrack","QuaternionKeyframeTrack","rot","scaleTrack","scl","AnimationMixer","root","actions","propertyBindingMap","addAction","propertyBindingKey","propertyBinding","PropertyBinding","referenceCount","removeAllActions","properyBindingKey","unbind","removeAction","findActionByName","play","optionalFadeInDuration","fadeOut","fadeIn","warp","startTimeScale","endTimeScale","crossFade","fadeOutAction","fadeInAction","startEndRatio","endStartRatio","deltaTime","mixerDeltaTime","actionTimeScale","actionDeltaTime","actionResults","accumulate","AnimationUtils","getEqualsFunc","exemplarValue","typeName","interTrack","lerpFunc","getLerpFunc","lerp_object","slerp_object","lerp_number","lerp_boolean","lerp_boolean_immediate","lerp_string","lerp_string_immediate","lastIndex","validate","setResult","prevKey","constantToNext","currentKey","lerpValues","shift","timeOffset","endTime","firstKeysToRemove","lastKeysToRemove","currKey","newKeys","nextKey","compareValues","key0","key1","GetTrackTypeForTypeName","toLowerCase","BooleanKeyframeTrack","StringKeyframeTrack","rootNode","originalValue","parseResults","parseTrackName","directoryName","objectName","objectIndex","propertyIndex","findNode","cumulativeValue","cumulativeWeight","reset","isBound","bind","lerpAlpha","lerpValue","setValue","getValue","equalsValue","triggerDirty","targetObject","skeleton","nodeProperty","remainingWeight","valueChanged","re","matches","searchSkeleton","bone","searchNodeSubtree","childNode","subTreeNode","value0","value1","clonedKeys","elementCount","valueType","jsonKey","quat","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","format","magFilter","minFilter","updateCubeMap","generateMipmaps","texture","activeCubeFace","setRenderTarget","zoom","updateProjectionMatrix","cx","cy","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","Light","onlyShadow","shadowCameraFov","shadow","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowBias","bias","shadowDarkness","darkness","shadowMapWidth","mapSize","shadowMapHeight","groundColor","intensity","decay","exponent","LightShadow","map","AmbientLight","DirectionalLight","HemisphereLight","skyColor","PointLight","SpotLight","Cache","files","file","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","url","pop","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","path","repeat","wrap","anisotropy","fullPath","loader","Handlers","load","setCrossOrigin","wrapS","wrapT","TextureLoader","MaterialLoader","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","test","XHRLoader","manager","DefaultLoadingManager","onLoad","onProgress","onError","cached","request","XMLHttpRequest","open","response","itemEnd","itemError","responseType","withCredentials","send","itemStart","setResponseType","setWithCredentials","ImageLoader","image","src","JSONLoader","statusDomElement","_statusDomElement","text","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","animations","concat","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","typedArray","getTexture","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","CircleBufferGeometry","segments","thetaStart","thetaLength","CircleGeometry","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","SphereGeometry","phiStart","phiLength","SphereBufferGeometry","DodecahedronGeometry","detail","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","heightScale","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","mode","Group","levels","level","addLevel","CubeTextureLoader","urls","loaded","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","overdraw","_needsUpdate","setValues","newValue","currentValue","wrapAround","boolean","wrapRGB","LineBasicMaterial","linewidth","linecap","linejoin","fog","LineDashedMaterial","dashSize","gapSize","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","MeshPhongMaterial","metal","emissiveMap","MeshDepthMaterial","MeshNormalMaterial","MultiMaterial","MeshFaceMaterial","PointsMaterial","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","ShaderMaterial","defines","lights","derivatives","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","onUpdate","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","CanvasTexture","VideoTexture","video","readyState","HAVE_ENOUGH_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","ParticleSystem","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","distSq","faceIndex","nbVertices","LineStrip","LinePieces","updateMorphTargets","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","gbone","rotq","normalizeSkinWeights","sw","getObjectForDistance","matrixPosition","guessSizeSq","Particle","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","ShaderChunk","merged","uniforms_src","uniforms_dst","parameter_src","UniformsLib","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","pointLightDecay","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","spotLightDecay","psColor","shadowmap","shadowMap","shadowMapSize","shadowMatrix","ShaderLib","basic","lambert","phong","dashed","totalSize","mNear","mFar","tCube","tFlip","equirect","tEquirect","depthRGBA","distanceRGBA","lightPos","glClearColor","_premultipliedAlpha","_gl","clearColor","setDefaultGLState","state","viewport","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","_lightsNeedUpdate","onContextLost","preventDefault","properties","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","extensions","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","numericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","projectObject","sprites","ImmediateRenderObject","_this","sortObjects","_projScreenMatrix","_frustum","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","uniformsList","uniformLocations","getUniforms","location","setMaterialFaces","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","CULL_FACE","setFlipSided","_usedTextureUnits","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","capabilities","logarithmicDepthBuffer","uniform1f","logDepthBufFC","cameraPosition","uniform3f","viewMatrix","floatVertexTextures","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","setupLights","refreshUniformsLights","_lights","markUniformsLightsNeedsUpdate","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","_shadowPass","refreshUniformsShadow","loadUniformsGeneric","loadUniformsMatrices","modelMatrix","uvScaleMap","WebGLRenderTarget","_canvas","ambient","directional","distances","decays","spot","directions","anglesCos","exponents","hemi","skyColors","groundColors","light","uniformMatrix3fv","maxTextures","uniform","uniform2f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","_array","i3","i4","setCubeTexture","setCubeTextureDynamic","setColorLinear","ll","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","pointDecays","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","spotDecays","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","pointCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","_direction","setTextureParameters","textureType","isImagePowerOfTwo","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","uploadTexture","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","clampToMaxSize","maxTextureSize","textureNeedsPowerOfTwo","makePowerOfTwo","glFormat","glType","mipmap","texImage2D","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","__version","maxSize","context","HTMLImageElement","HTMLCanvasElement","TEXTURE_CUBE_MAP","isCompressed","isDataTexture","cubeImage","autoScaleCubemaps","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","updateRenderTargetMipmap","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","MIN_EXT","MAX_EXT","_context","_width","_height","pixelRatio","_alpha","_depth","_stencil","stencil","_antialias","antialias","premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","gammaInput","gammaOutput","_currentFramebuffer","_currentWidth","_currentHeight","_infoRender","calls","info","memory","programs","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLObjects","WebGLPrograms","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","getSize","updateStyle","setViewport","getViewport","dimensions","setScissor","scissor","enableScissorTest","setScissorTest","getClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","nz","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","renderInstances","lineWidth","LINE_STRIP","POINTS","forceClear","isTargetPowerOfTwo","setFaceCulling","cullFace","frontFaceDirection","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","complete","isCube","createFramebuffer","createRenderbuffer","shareDepthFrom","vx","vy","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsVertexTextures","vertexTextures","supportsInstancedArrays","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapEnabled","shadowMapType","shadowMapCullFace","shadowMapDebug","debug","options","drawArraysInstancedANGLE","drawElements","drawElementsInstancedANGLE","gl","getExtension","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttributes","property","deleteAttribute","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","subarray","edges","checkEdge","list","WebGLProgram","generateDefines","fetchUniformLocations","identifiers","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","suffixPos","substr","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","filterEmptyLine","programIdCount","shadowMapTypeDefine","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customDefines","createProgram","maxDirLights","maxPointLights","maxSpotLights","maxHemiLights","maxShadows","maxBones","flatShading","doubleSided","flipSided","pointLightShadows","filter","useFog","fogExp","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","allocateLights","dirLights","pointLights","spotLights","hemiLights","allocateShadows","shaderIDs","parameterNames","maxLightCount","allocatedShadows","envMapMode","parameterName","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","_renderer","_objects","getDepthMaterial","isPointLight","lightPositionWorld","newMaterial","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","_renderList","_state","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","_vector4","depthShader","depthUniforms","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","faceCount","BLEND","shadowCamera","vpWidth","vpHeight","shadowFilter","pars","vpDimensions","clearAlpha","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentDepthFunc","currentDepthWrite","currentColorWrite","currentFlipSided","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentTextureSlot","currentBoundTextures","DEPTH_TEST","LEQUAL","blendFunc","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","NEVER","ALWAYS","LESS","EQUAL","GEQUAL","GREATER","NOTEQUAL","depthMask","colorMask","factor","units","POLYGON_OFFSET_FILL","scissorTest","SCISSOR_TEST","webglSlot","webglType","webglTexture","boundTexture","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","sprite","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","GeometryUtils","geometry1","geometry2","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Audio","createBufferSource","onended","onEnded","gain","createGain","connect","destination","panner","createPanner","autoplay","playbackRate","isPlaying","onload","decodeAudioData","pause","currentTime","disconnect","setFilter","getFilter","setPlaybackRate","getPlaybackRate","setLoop","getLoop","setRefDistance","refDistance","getRefDistance","setRolloffFactor","rolloffFactor","getRolloffFactor","setVolume","getVolume","AudioListener","AudioContext","webkitAudioContext","orientation","setOrientation","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","vec","getTangentAt","Utils","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","Path","fromPoints","moveTo","lineTo","args","lastargs","x0","y0","quadraticCurveTo","aCPx","aCPy","QuadraticBezierCurve","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","lastPoint","closedPath","cpx2","cpy2","cpx1","cpy1","cpx0","cpy0","laste","item","spts","spline","deltaAngle","tdivisions","toShapes","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","shapes","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","tangent","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","x1","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","ClosedSplineCurve3","buildPlane","udir","vdir","gridX","gridY","width_half","height_half","gridX1","gridY1","segment_width","segment_height","uva","uvb","uvc","uvd","depth_half","CubeGeometry","ii","segment","heightHalf","verticesRow","uvsRow","na","nb","tanTheta","v4","n1","n2","n3","n4","uv4","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","pt","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheGeometry","inversePointLength","inverseSegments","phi","np","base","u0","u1","PlaneGeometry","PlaneBufferGeometry","offset2","radiusStep","thetaSegment","thetaEnd","vertexCount","getPos","in_q","in_p","cu","su","quOverP","cs","tz","grid","tang","bitan","ip","jp","closed","taper","NoTaper","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","drawcall","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","dir","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","colorCenterLine","colorGrid","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","frameTime","keyframe","mix"],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var THREE = require('../vendor/three.js');\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\nvar geometry = new THREE.BoxGeometry( 1, 1, 1 );\nvar material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\nvar cube = new THREE.Mesh( geometry, material );\nscene.add( cube );\n\ncamera.position.z = 5;\n\nvar render = function () {\n  requestAnimationFrame( render );\n\n  cube.rotation.x += 0.1;\n  cube.rotation.y += 0.1;\n\n  renderer.render(scene, camera);\n};\n\nrender();",null,"// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '73' };\n\n//\n\nif ( typeof define === 'function' && define.amd ) {\n\n\t\tdefine( 'three', THREE );\n\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\n\t\tmodule.exports = THREE;\n\n}\n\n\n// polyfills\n\nif ( self.requestAnimationFrame === undefined || self.cancelAnimationFrame === undefined ) {\n\n\t// Missing in Android stock browser.\n\n\t( function () {\n\n\t\tvar lastTime = 0;\n\t\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\n\n\t\tfor ( var x = 0; x < vendors.length && ! self.requestAnimationFrame; ++ x ) {\n\n\t\t\tself.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];\n\t\t\tself.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\n\n\t\t}\n\n\t\tif ( self.requestAnimationFrame === undefined && self.setTimeout !== undefined ) {\n\n\t\t\tself.requestAnimationFrame = function ( callback ) {\n\n\t\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\n\t\t\t\tvar id = self.setTimeout( function () {\n\n\t\t\t\t\tcallback( currTime + timeToCall );\n\n\t\t\t\t}, timeToCall );\n\t\t\t\tlastTime = currTime + timeToCall;\n\t\t\t\treturn id;\n\n\t\t\t};\n\n\t\t}\n\n\t\tif ( self.cancelAnimationFrame === undefined && self.clearTimeout !== undefined ) {\n\n\t\t\tself.cancelAnimationFrame = function ( id ) {\n\n\t\t\t\tself.clearTimeout( id );\n\n\t\t\t};\n\n\t\t}\n\n\t} )();\n\n}\n\n//\n\nif ( self.performance === undefined ) {\n\n\tself.performance = {};\n\n}\n\nif ( self.performance.now === undefined ) {\n\n\t( function () {\n\n\t\tvar start = Date.now();\n\n\t\tself.performance.now = function () {\n\n\t\t\treturn Date.now() - start;\n\n\t\t}\n\n\t} )();\n\n}\n\n//\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, -52 );\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {\n\n\t// Missing in IE9-11.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\nTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\n// GL STATE CONSTANTS\n\nTHREE.CullFaceNone = 0;\nTHREE.CullFaceBack = 1;\nTHREE.CullFaceFront = 2;\nTHREE.CullFaceFrontBack = 3;\n\nTHREE.FrontFaceDirectionCW = 0;\nTHREE.FrontFaceDirectionCCW = 1;\n\n// SHADOWING TYPES\n\nTHREE.BasicShadowMap = 0;\nTHREE.PCFShadowMap = 1;\nTHREE.PCFSoftShadowMap = 2;\n\n// MATERIAL CONSTANTS\n\n// side\n\nTHREE.FrontSide = 0;\nTHREE.BackSide = 1;\nTHREE.DoubleSide = 2;\n\n// shading\n\nTHREE.FlatShading = 1;\nTHREE.SmoothShading = 2;\n\n// colors\n\nTHREE.NoColors = 0;\nTHREE.FaceColors = 1;\nTHREE.VertexColors = 2;\n\n// blending modes\n\nTHREE.NoBlending = 0;\nTHREE.NormalBlending = 1;\nTHREE.AdditiveBlending = 2;\nTHREE.SubtractiveBlending = 3;\nTHREE.MultiplyBlending = 4;\nTHREE.CustomBlending = 5;\n\n// custom blending equations\n// (numbers start from 100 not to clash with other\n// mappings to OpenGL constants defined in Texture.js)\n\nTHREE.AddEquation = 100;\nTHREE.SubtractEquation = 101;\nTHREE.ReverseSubtractEquation = 102;\nTHREE.MinEquation = 103;\nTHREE.MaxEquation = 104;\n\n// custom blending destination factors\n\nTHREE.ZeroFactor = 200;\nTHREE.OneFactor = 201;\nTHREE.SrcColorFactor = 202;\nTHREE.OneMinusSrcColorFactor = 203;\nTHREE.SrcAlphaFactor = 204;\nTHREE.OneMinusSrcAlphaFactor = 205;\nTHREE.DstAlphaFactor = 206;\nTHREE.OneMinusDstAlphaFactor = 207;\n\n// custom blending source factors\n\n//THREE.ZeroFactor = 200;\n//THREE.OneFactor = 201;\n//THREE.SrcAlphaFactor = 204;\n//THREE.OneMinusSrcAlphaFactor = 205;\n//THREE.DstAlphaFactor = 206;\n//THREE.OneMinusDstAlphaFactor = 207;\nTHREE.DstColorFactor = 208;\nTHREE.OneMinusDstColorFactor = 209;\nTHREE.SrcAlphaSaturateFactor = 210;\n\n// depth modes\n\nTHREE.NeverDepth = 0;\nTHREE.AlwaysDepth = 1;\nTHREE.LessDepth = 2;\nTHREE.LessEqualDepth = 3;\nTHREE.EqualDepth = 4;\nTHREE.GreaterEqualDepth = 5;\nTHREE.GreaterDepth = 6;\nTHREE.NotEqualDepth = 7;\n\n\n// TEXTURE CONSTANTS\n\nTHREE.MultiplyOperation = 0;\nTHREE.MixOperation = 1;\nTHREE.AddOperation = 2;\n\n// Mapping modes\n\nTHREE.UVMapping = 300;\n\nTHREE.CubeReflectionMapping = 301;\nTHREE.CubeRefractionMapping = 302;\n\nTHREE.EquirectangularReflectionMapping = 303;\nTHREE.EquirectangularRefractionMapping = 304;\n\nTHREE.SphericalReflectionMapping = 305;\n\n// Wrapping modes\n\nTHREE.RepeatWrapping = 1000;\nTHREE.ClampToEdgeWrapping = 1001;\nTHREE.MirroredRepeatWrapping = 1002;\n\n// Filters\n\nTHREE.NearestFilter = 1003;\nTHREE.NearestMipMapNearestFilter = 1004;\nTHREE.NearestMipMapLinearFilter = 1005;\nTHREE.LinearFilter = 1006;\nTHREE.LinearMipMapNearestFilter = 1007;\nTHREE.LinearMipMapLinearFilter = 1008;\n\n// Data types\n\nTHREE.UnsignedByteType = 1009;\nTHREE.ByteType = 1010;\nTHREE.ShortType = 1011;\nTHREE.UnsignedShortType = 1012;\nTHREE.IntType = 1013;\nTHREE.UnsignedIntType = 1014;\nTHREE.FloatType = 1015;\nTHREE.HalfFloatType = 1025;\n\n// Pixel types\n\n//THREE.UnsignedByteType = 1009;\nTHREE.UnsignedShort4444Type = 1016;\nTHREE.UnsignedShort5551Type = 1017;\nTHREE.UnsignedShort565Type = 1018;\n\n// Pixel formats\n\nTHREE.AlphaFormat = 1019;\nTHREE.RGBFormat = 1020;\nTHREE.RGBAFormat = 1021;\nTHREE.LuminanceFormat = 1022;\nTHREE.LuminanceAlphaFormat = 1023;\n// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\nTHREE.RGBEFormat = THREE.RGBAFormat; //1024;\n\n// DDS / ST3C Compressed texture formats\n\nTHREE.RGB_S3TC_DXT1_Format = 2001;\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\n\n\n// PVRTC compressed texture formats\n\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\n\n// Loop styles for AnimationAction\n\nTHREE.LoopOnce = 2200;\nTHREE.LoopRepeat = 2201;\nTHREE.LoopPingPong = 2202;\n\n// DEPRECATED\n\nTHREE.Projector = function () {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n};\n\nTHREE.CanvasRenderer = function () {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElement( 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n};\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( color ) {\n\n\tif ( arguments.length === 3 ) {\n\n\t\treturn this.fromArray( arguments );\n\n\t}\n\n\treturn this.set( color );\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tvar order = euler.order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function ( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\tthis.normalize();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t}(),\n\n\tinverse: function () {\n\n\t\tthis.conjugate().normalize();\n\n\t\treturn this;\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\n\n\treturn qm.copy( qa ).slerp( qb, t );\n\n};\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tget width() { return this.x },\n\tset width( value ) { this.x = value },\n\n\tget height() { return this.y },\n\tset height( value ) { this.y = value },\n\n\t//\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t} else {\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\treturn this;\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tlengthManhattan: function() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t} else {\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\n\t\tvar qx = q.x;\n\t\tvar qy = q.y;\n\t\tvar qz = q.z;\n\t\tvar qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function project( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\tthis.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\treturn this;\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\treturn this;\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function () {\n\n\t\tvar v1, dot;\n\n\t\treturn function projectOnVector( vector ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( vector ).normalize();\n\n\t\t\tdot = this.dot( v1 );\n\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\n\n\t\t};\n\n\t}(),\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t}\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function reflect( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t}\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( this.length() * v.length() );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x;\n\t\tvar dy = this.y - v.y;\n\t\tvar dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tsetEulerFromRotationMatrix: function ( m, order ) {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\n\tsetEulerFromQuaternion: function ( q, order ) {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\n\t\treturn this.setFromMatrixScale( m );\n\n\t},\n\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\n\t\treturn this.setFromMatrixColumn( index, matrix );\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tthis.x = m.elements[ 12 ];\n\t\tthis.y = m.elements[ 13 ];\n\t\tthis.z = m.elements[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();\n\t\tvar sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();\n\t\tvar sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( index, matrix ) {\n\n\t\tvar offset = index * 4;\n\n\t\tvar me = matrix.elements;\n\n\t\tthis.x = me[ offset ];\n\t\tthis.y = me[ offset + 1 ];\n\t\tthis.z = me[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t} else {\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\t\tvar w = this.w;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\n\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\n\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\n\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\n\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order);\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix;\n\n\t\treturn function ( q, order, update ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\t\tthis.setFromRotationMatrix( matrix, order, update );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function ( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\tthis.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function ( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] )\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function ( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\t\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tisIntersectionBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\n\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tv1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ||\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tisIntersectionBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function ( matrix ) {\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111\n\n\t\t\tthis.makeEmpty();\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;\n\t\tte[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;\n\t\tte[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\n\tmultiplyVector3Array: function ( a ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function ( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnInvertible ) {\n\n\t\t// input: THREE.Matrix4\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\n\n\t\tvar me = matrix.elements;\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];\n\t\tte[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];\n\t\tte[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];\n\t\tte[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];\n\t\tte[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];\n\t\tte[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];\n\t\tte[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];\n\t\tte[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];\n\t\tte[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];\n\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\n\n\t\t// no inverse\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnInvertible || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\tthis.identity();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.multiplyScalar( 1.0 / det );\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t},\n\n\tgetNormalMatrix: function ( m ) {\n\n\t\t// input: THREE.Matrix4\n\n\t\tthis.getInverse( m ).transpose();\n\n\t\treturn this;\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\tvar te = this.elements;\n\n\t\treturn [\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\n\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\n\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\n\t\t];\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tvar te = this.elements;\n\n\t\txAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\tyAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\tzAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1;\n\n\t\treturn function ( m ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();\n\t\t\tvar scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();\n\t\t\tvar scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x, y, z;\n\n\t\treturn function ( eye, target, up ) {\n\n\t\t\tif ( x === undefined ) x = new THREE.Vector3();\n\t\t\tif ( y === undefined ) y = new THREE.Vector3();\n\t\t\tif ( z === undefined ) z = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\tz.x += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\n\t},\n\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\n\tmultiplyVector3Array: function ( a ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function ( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\n\t\tv.transformDirection( this );\n\n\t},\n\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function () {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\tvar te = this.elements;\n\t\t\treturn v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnInvertible ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tvar n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];\n\t\tvar n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];\n\t\tvar n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];\n\t\tvar n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];\n\n\t\tte[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\n\t\tte[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\n\t\tte[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\n\t\tte[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\n\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\n\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\n\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\n\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\n\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\n\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\n\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\n\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\n\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\n\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\n\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\n\n\t\tvar det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnInvertible || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\tthis.identity();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.multiplyScalar( 1 / det );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( v ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\n\trotateX: function ( angle ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\n\trotateY: function ( angle ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\n\trotateZ: function ( angle ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\n\trotateByAxis: function ( axis, angle ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector, matrix;\n\n\t\treturn function ( position, quaternion, scale ) {\n\n\t\t\tif ( vector === undefined ) vector = new THREE.Vector3();\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\n\t\t\t\tsx = - sx;\n\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = right - left;\n\t\tvar h = top - bottom;\n\t\tvar p = far - near;\n\n\t\tvar x = ( right + left ) / w;\n\t\tvar y = ( top + bottom ) / h;\n\t\tvar z = ( far + near ) / p;\n\n\t\tte[ 0 ] = 2 / w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 / h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 / p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\tvar te = this.elements;\n\n\t\treturn [\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\n\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\n\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\n\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\n\t\t];\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new THREE.Vector3();\n\t\tvar segDir = new THREE.Vector3();\n\t\tvar diff = new THREE.Vector3();\n\n\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tintersectSphere: function () {\n\n\t\t// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\n\t\t\tvar tca = v1.dot( this.direction );\n\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t}\n\n\t}(),\n\n\tisIntersectionPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\tisIntersectionBox: function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function ( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t}(),\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function ( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tisIntersectionLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function ( matrix, optionalNormalMatrix ) {\n\n\t\t\t// compute new normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\n\n\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\n\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function () {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random float from <0, 1> with 16 bits of randomness\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\n\n\trandom16: function () {\n\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function () {\n\n\t\tvar degreeToRadiansFactor = Math.PI / 180;\n\n\t\treturn function ( degrees ) {\n\n\t\t\treturn degrees * degreeToRadiansFactor;\n\n\t\t};\n\n\t}(),\n\n\tradToDeg: function () {\n\n\t\tvar radianToDegreesFactor = 180 / Math.PI;\n\n\t\treturn function ( radians ) {\n\n\t\t\treturn radians * radianToDegreesFactor;\n\n\t\t};\n\n\t}(),\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tvalue --;\n\t\tvalue |= value >> 1;\n\t\tvalue |= value >> 2;\n\t\tvalue |= value >> 4;\n\t\tvalue |= value >> 8;\n\t\tvalue |= value >> 16;\n\t\tvalue ++;\n\n\t\treturn value;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\trealDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function ( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function ( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function ( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n};\n\n// File:src/core/Channels.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Channels = function () {\n\n\tthis.mask = 1;\n\n};\n\nTHREE.Channels.prototype = {\n\n\tconstructor: THREE.Channels,\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel );\n\n\t}\n\n};\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = self.performance.now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = self.performance.now();\n\n\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {};\n\nTHREE.EventDispatcher.prototype = {\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( object ) {\n\n\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\n\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\n\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\n\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\n\n\t},\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [];\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tfunction descSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( descSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( descSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.channels = new THREE.Channels();\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new THREE.Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new THREE.Matrix3()\n\t\t}\n\t} );\n\n\tthis.rotationAutoUpdate = true;\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\nTHREE.Object3D.prototype = {\n\n\tconstructor: THREE.Object3D,\n\n\tget eulerOrder () {\n\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\n\t\treturn this.rotation.order;\n\n\t},\n\n\tset eulerOrder ( value ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\n\t\tthis.rotation.order = value;\n\n\t},\n\n\tget useQuaternion () {\n\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t},\n\n\tset useQuaternion ( value ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t},\n\n\tset renderDepth ( value ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t},\n\n\t//\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function ( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t},\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function ( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetChildByName: function ( name ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRootObject = ( meta === undefined );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.material = this.material.uuid;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.rotationAutoUpdate = source.rotationAutoUpdate;\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Face4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.array.length / this.itemSize;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n};\n\nTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n};\n\n\n// Deprecated\n\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n};\n\n// File:src/core/InstancedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.InterleavedBuffer.prototype = {\n\n\tconstructor: THREE.InterleavedBuffer,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tget count () {\n\n\t\treturn this.array.length / this.stride;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/core/InstancedInterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n};\n\n\nTHREE.InterleavedBufferAttribute.prototype = {\n\n\tconstructor: THREE.InterleavedBufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.data.array.length / this.data.stride;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.elementsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nTHREE.Geometry.prototype = {\n\n\tconstructor: THREE.Geometry,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar vertices = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0, k = 0; i < vertices.length; i += 3, j += 2, k += 4 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < vertices.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new THREE.Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = false; // face.materialIndex !== undefined;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 );\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.vertices = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/core/DirectGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'DirectGeometry';\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nTHREE.DirectGeometry.prototype = {\n\n\tconstructor: THREE.DirectGeometry,\n\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\tcomputeFaceNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tvar morphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tvar morphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n};\n\nTHREE.BufferGeometry.prototype = {\n\n\tconstructor: THREE.BufferGeometry,\n\n\taddIndex: function ( index ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\n\t},\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tthis.index = index;\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t},\n\n\tget drawcalls() {\n\n\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\treturn this.groups;\n\n\t},\n\n\tget offsets() {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\treturn this.groups;\n\n\t},\n\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tif ( indexOffset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\n\t},\n\n\tclearDrawCalls: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tvar attribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar bb = this.boundingBox;\n\t\t\t\tbb.makeEmpty();\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( positions, i );\n\t\t\t\t\tbb.expandByPoint( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( positions === undefined || positions.length === 0 ) {\n\n\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\n\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tbox.makeEmpty();\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( positions, i );\n\t\t\t\t\tbox.expandByPoint( vector );\n\n\t\t\t\t}\n\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( positions, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = normals.length; i < il; i ++ ) {\n\n\t\t\t\t\tnormals[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeOffsets: function ( size ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.')\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\n\nTHREE.BufferGeometry.MaxIndex = 65535;\n\n// File:src/core/InstancedBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\tthis.groups.push( {\n\n\t\tstart: start,\n\t\tcount: count,\n\t\tinstances: instances\n\n\t} );\n\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\tvar index = source.index;\n\n\tif ( index !== null ) {\n\n\t\tthis.setIndex( index.clone() );\n\n\t}\n\n\tvar attributes = source.attributes;\n\n\tfor ( var name in attributes ) {\n\n\t\tvar attribute = attributes[ name ];\n\t\tthis.addAttribute( name, attribute.clone() );\n\n\t}\n\n\tvar groups = source.groups;\n\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tvar group = groups[ i ];\n\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t}\n\n\treturn this;\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );\n\n// File:src/animation/AnimationAction.js\n\n/**\n *\n * A clip that has been explicitly scheduled.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationAction = function ( clip, startTime, timeScale, weight, loop ) {\n\n\tif ( clip === undefined ) throw new Error( 'clip is null' );\n\tthis.clip = clip;\n\tthis.localRoot = null;\n\tthis.startTime = startTime || 0;\n\tthis.timeScale = timeScale || 1;\n\tthis.weight = weight || 1;\n\tthis.loop = loop || THREE.LoopRepeat;\n\tthis.loopCount = 0;\n\tthis.enabled = true;\t// allow for easy disabling of the action.\n\n\tthis.actionTime = - this.startTime;\n\tthis.clipTime = 0;\n\n\tthis.propertyBindings = [];\n};\n\n/*\nTHREE.LoopOnce = 2200;\nTHREE.LoopRepeat = 2201;\nTHREE.LoopPingPing = 2202;\n*/\n\nTHREE.AnimationAction.prototype = {\n\n\tconstructor: THREE.AnimationAction,\n\n\tsetLocalRoot: function( localRoot ) {\n\n\t\tthis.localRoot = localRoot;\n\n\t\treturn this;\n\n\t},\n\n\tupdateTime: function( clipDeltaTime ) {\n\n\t\tvar previousClipTime = this.clipTime;\n   \t\tvar previousLoopCount = this.loopCount;\n   \t\tvar previousActionTime = this.actionTime;\n\n\t\tvar duration = this.clip.duration;\n\n\t\tthis.actionTime = this.actionTime + clipDeltaTime;\n\n\t\tif ( this.loop === THREE.LoopOnce ) {\n\n\t\t\tthis.loopCount = 0;\n\t\t\tthis.clipTime = Math.min( Math.max( this.actionTime, 0 ), duration );\n\n\t\t\t// if time is changed since last time, see if we have hit a start/end limit\n\t\t\tif ( this.clipTime !== previousClipTime ) {\n\n\t\t\t\tif ( this.clipTime === duration ) {\n\n\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: 1 } );\n\n\t\t\t\t} else if ( this.clipTime === 0 ) {\n\n\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: -1 } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\treturn this.clipTime;\n\n\t\t}\n\n\t\tthis.loopCount = Math.floor( this.actionTime / duration );\n\n\t\tvar newClipTime = this.actionTime - this.loopCount * duration;\n\t\tnewClipTime = newClipTime % duration;\n\n\t\t// if we are ping pong looping, ensure that we go backwards when appropriate\n\t\tif ( this.loop == THREE.LoopPingPong ) {\n\n\t\t\tif ( Math.abs( this.loopCount % 2 ) === 1 ) {\n\n\t\t\t\tnewClipTime = duration - newClipTime;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clipTime = newClipTime;\n\n\t\tif ( this.loopCount !== previousLoopCount ) {\n\n   \t\t\tthis.mixer.dispatchEvent( { type: 'loop', action: this, loopDelta: ( this.loopCount - this.loopCount ) } );\n\n   \t\t}\n\n\t   \treturn this.clipTime;\n\n\t},\n\n\tsyncWith: function( action ) {\n\n\t\tthis.actionTime = action.actionTime;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this;\n\t},\n\n\twarpToDuration: function( duration ) {\n\n\t\tthis.timeScale = this.clip.duration / duration;\n\n\t\treturn this;\n\t},\n\n\tinit: function( time ) {\n\n\t\tthis.clipTime = time - this.startTime;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function( clipDeltaTime ) {\n\n\t\tthis.updateTime( clipDeltaTime );\n\n\t\tvar clipResults = this.clip.getAt( this.clipTime );\n\n\t\treturn clipResults;\n\n\t},\n\n\tgetTimeScaleAt: function( time ) {\n\n\t\tif ( this.timeScale.getAt ) {\n\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\n\t\t\treturn this.timeScale.getAt( time );\n\n\t\t}\n\n\t\treturn this.timeScale;\n\n\t},\n\n\tgetWeightAt: function( time ) {\n\n\t\tif ( this.weight.getAt ) {\n\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\n\t\t\treturn this.weight.getAt( time );\n\n\t\t}\n\n\t\treturn this.weight;\n\n\t}\n\n};\n\n// File:src/animation/AnimationClip.js\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\t\tvar track = this.tracks[i];\n\t\t\tthis.duration = Math.max( track.keys[ track.keys.length - 1 ].time );\n\t\t}\n\t}\n\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t// but leaving these here during development as this ensures a lot of testing of these functions\n\tthis.trim();\n\tthis.optimize();\n\n\tthis.results = [];\n\n};\n\nTHREE.AnimationClip.prototype = {\n\n\tconstructor: THREE.AnimationClip,\n\n\tgetAt: function( clipTime ) {\n\n\t\tclipTime = Math.max( 0, Math.min( clipTime, this.duration ) );\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tthis.results[ i ] = track.getAt( clipTime );\n\n\t\t}\n\n\t\treturn this.results;\n\t},\n\n\ttrim: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n\nTHREE.AnimationClip.CreateFromMorphTargetSequence = function( name, morphTargetSequence, fps ) {\n\n\n\tvar numMorphTargets = morphTargetSequence.length;\n\tvar tracks = [];\n\n\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\tvar keys = [];\n\n\t\tkeys.push( { time: ( i + numMorphTargets - 1 ) % numMorphTargets, value: 0 } );\n\t\tkeys.push( { time: i, value: 1 } );\n\t\tkeys.push( { time: ( i + 1 ) % numMorphTargets, value: 0 } );\n\n\t\tkeys.sort( THREE.KeyframeTrack.keyComparer );\n\n\t\t// if there is a key at the first frame, duplicate it as the last frame as well for perfect loop.\n\t\tif ( keys[0].time === 0 ) {\n\t\t\tkeys.push( {\n\t\t\t\ttime: numMorphTargets,\n\t\t\t\tvalue: keys[0].value\n\t\t\t});\n\t\t}\n\n\t\ttracks.push( new THREE.NumberKeyframeTrack( '.morphTargetInfluences[' + morphTargetSequence[i].name + ']', keys ).scale( 1.0 / fps ) );\n\t}\n\n\treturn new THREE.AnimationClip( name, -1, tracks );\n\n};\n\nTHREE.AnimationClip.findByName = function( clipArray, name ) {\n\n\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\tif ( clipArray[i].name === name ) {\n\n\t\t\treturn clipArray[i];\n\n\t\t}\n\t}\n\n\treturn null;\n\n};\n\nTHREE.AnimationClip.CreateClipsFromMorphTargetSequences = function( morphTargets, fps ) {\n\n\tvar animationToMorphTargets = {};\n\n\t// tested with https://regex101.com/ on trick sequences such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t// sort morph target names into animation groups based patterns like Walk_001, Walk_002, Run_001, Run_002\n\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morphTarget = morphTargets[ i ];\n\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\tvar name = parts[ 1 ];\n\n\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\tif ( ! animationMorphTargets ) {\n\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\t\t}\n\n\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t}\n\n\t}\n\n\tvar clips = [];\n\n\tfor ( var name in animationToMorphTargets ) {\n\n\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );\n\t}\n\n\treturn clips;\n\n};\n\n// parse the standard JSON format for clips\nTHREE.AnimationClip.parse = function( json ) {\n\n\tvar tracks = [];\n\n\tfor ( var i = 0; i < json.tracks.length; i ++ ) {\n\n\t\ttracks.push( THREE.KeyframeTrack.parse( json.tracks[i] ).scale( 1.0 / json.fps ) );\n\n\t}\n\n\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n};\n\n\n// parse the animation.hierarchy format\nTHREE.AnimationClip.parseAnimation = function( animation, bones, nodeName ) {\n\n\tif ( ! animation ) {\n\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\treturn null;\n\t}\n\n\tvar convertTrack = function( trackName, animationKeys, propertyName, trackType, animationKeyToValueFunc ) {\n\n\t\tvar keys = [];\n\n\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\tif ( animationKey[propertyName] !== undefined ) {\n\n\t\t\t\tkeys.push( { time: animationKey.time, value: animationKeyToValueFunc( animationKey ) } );\n\t\t\t}\n\n\t\t}\n\n\t\t// only return track if there are actually keys.\n\t\tif ( keys.length > 0 ) {\n\n\t\t\treturn new trackType( trackName, keys );\n\n\t\t}\n\n\t\treturn null;\n\n\t};\n\n\tvar tracks = [];\n\n\tvar clipName = animation.name || 'default';\n\tvar duration = animation.length || -1; // automatic length determination in AnimationClip.\n\tvar fps = animation.fps || 30;\n\n\tvar hierarchyTracks = animation.hierarchy || [];\n\n\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t// skip empty tracks\n\t\tif ( ! animationKeys || animationKeys.length == 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// process morph targets in a way exactly compatible with AnimationHandler.init( animation )\n\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t// figure out all morph targets used in this track\n\t\t\tvar morphTargetNames = {};\n\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// create a track for each morph target with all zero morphTargetInfluences except for the keys in which the morphTarget is named.\n\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\tvar keys = [];\n\n\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\tkeys.push( {\n\t\t\t\t\t\t\ttime: animationKey.time,\n\t\t\t\t\t\t\tvalue: (( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )\n\t\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack( nodeName + '.morphTargetInfluence[' + morphTargetName + ']', keys ) );\n\n\t\t\t}\n\n\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t} else {\n\n\t\t\tvar boneName = nodeName + '.bones[' + bones[ h ].name + ']';\n\n\t\t\t// track contains positions...\n\t\t\tvar positionTrack = convertTrack( boneName + '.position', animationKeys, 'pos', THREE.VectorKeyframeTrack, function( animationKey ) {\n\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.pos )\n\t\t\t\t} );\n\n\t\t\tif ( positionTrack ) tracks.push( positionTrack );\n\n\t\t\t// track contains quaternions...\n\t\t\tvar quaternionTrack = convertTrack( boneName + '.quaternion', animationKeys, 'rot', THREE.QuaternionKeyframeTrack, function( animationKey ) {\n\t\t\t\t\tif ( animationKey.rot.slerp ) {\n\t\t\t\t\t\treturn animationKey.rot.clone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new THREE.Quaternion().fromArray( animationKey.rot );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\tif ( quaternionTrack ) tracks.push( quaternionTrack );\n\n\t\t\t// track contains quaternions...\n\t\t\tvar scaleTrack = convertTrack( boneName + '.scale', animationKeys, 'scl', THREE.VectorKeyframeTrack, function( animationKey ) {\n\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.scl )\n\t\t\t\t} );\n\n\t\t\tif ( scaleTrack ) tracks.push( scaleTrack );\n\n\t\t}\n\t}\n\n\tif ( tracks.length === 0 ) {\n\n\t\treturn null;\n\n\t}\n\n\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\treturn clip;\n\n};\n\n// File:src/animation/AnimationMixer.js\n\n/**\n *\n * Mixes together the AnimationClips scheduled by AnimationActions and applies them to the root and subtree\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationMixer = function( root ) {\n\n\tthis.root = root;\n\tthis.time = 0;\n\tthis.timeScale = 1.0;\n\tthis.actions = [];\n\tthis.propertyBindingMap = {};\n\n};\n\nTHREE.AnimationMixer.prototype = {\n\n\tconstructor: THREE.AnimationMixer,\n\n\taddAction: function( action ) {\n\n\t\t// TODO: check for duplicate action names?  Or provide each action with a UUID?\n\n\t\tthis.actions.push( action );\n\t\taction.init( this.time );\n\t\taction.mixer = this;\n\n\t\tvar tracks = action.clip.tracks;\n\n\t\tvar root = action.localRoot || this.root;\n\n\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\n\n\t\t\tvar track = tracks[ i ];\n\n\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\n\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\n\n\t\t\tif ( propertyBinding === undefined ) {\n\n\t\t\t\tpropertyBinding = new THREE.PropertyBinding( root, track.name );\n\t\t\t\tthis.propertyBindingMap[ propertyBindingKey ] = propertyBinding;\n\n\t\t\t}\n\n\t\t\t// push in the same order as the tracks.\n\t\t\taction.propertyBindings.push( propertyBinding );\n\n\t\t\t// track usages of shared property bindings, because if we leave too many around, the mixer can get slow\n\t\t\tpropertyBinding.referenceCount += 1;\n\n\t\t}\n\n\t},\n\n\tremoveAllActions: function() {\n\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\n\n\t\t\tthis.actions[i].mixer = null;\n\n\t\t}\n\n\t\t// unbind all property bindings\n\t\tfor ( var properyBindingKey in this.propertyBindingMap ) {\n\n\t\t\tthis.propertyBindingMap[ properyBindingKey ].unbind();\n\n\t\t}\n\n\t\tthis.actions = [];\n\t\tthis.propertyBindingMap = {};\n\n\t\treturn this;\n\n\t},\n\n\tremoveAction: function( action ) {\n\n\t\tvar index = this.actions.indexOf( action );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.actions.splice( index, 1 );\n\t\t\taction.mixer = null;\n\n\t\t}\n\n\n\t\t// remove unused property bindings because if we leave them around the mixer can get slow\n\t\tvar root = action.localRoot || this.root;\n\t\tvar tracks = action.clip.tracks;\n\n\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\n\n\t\t\tvar track = tracks[ i ];\n\n\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\n\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\n\n\t\t\tpropertyBinding.referenceCount -= 1;\n\n\t\t\tif ( propertyBinding.referenceCount <= 0 ) {\n\n\t\t\t\tpropertyBinding.unbind();\n\n\t\t\t\tdelete this.propertyBindingMap[ propertyBindingKey ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// can be optimized if needed\n\tfindActionByName: function( name ) {\n\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\n\n\t\t\tif ( this.actions[i].name === name ) return this.actions[i];\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tplay: function( action, optionalFadeInDuration ) {\n\n\t\taction.startTime = this.time;\n\t\tthis.addAction( action );\n\n\t\treturn this;\n\n\t},\n\n\tfadeOut: function( action, duration ) {\n\n\t\tvar keys = [];\n\n\t\tkeys.push( { time: this.time, value: 1 } );\n\t\tkeys.push( { time: this.time + duration, value: 0 } );\n\n\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\n\n\t\treturn this;\n\n\t},\n\n\tfadeIn: function( action, duration ) {\n\n\t\tvar keys = [];\n\n\t\tkeys.push( { time: this.time, value: 0 } );\n\t\tkeys.push( { time: this.time + duration, value: 1 } );\n\n\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\n\n\t\treturn this;\n\n\t},\n\n\twarp: function( action, startTimeScale, endTimeScale, duration ) {\n\n\t\tvar keys = [];\n\n\t\tkeys.push( { time: this.time, value: startTimeScale } );\n\t\tkeys.push( { time: this.time + duration, value: endTimeScale } );\n\n\t\taction.timeScale = new THREE.NumberKeyframeTrack( \"timeScale\", keys );\n\n\t\treturn this;\n\n\t},\n\n\tcrossFade: function( fadeOutAction, fadeInAction, duration, warp ) {\n\n\t\tthis.fadeOut( fadeOutAction, duration );\n\t\tthis.fadeIn( fadeInAction, duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar startEndRatio = fadeOutAction.clip.duration / fadeInAction.clip.duration;\n\t\t\tvar endStartRatio = 1.0 / startEndRatio;\n\n\t\t\tthis.warp( fadeOutAction, 1.0, startEndRatio, duration );\n\t\t\tthis.warp( fadeInAction, endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function( deltaTime ) {\n\n\t\tvar mixerDeltaTime = deltaTime * this.timeScale;\n\t\tthis.time += mixerDeltaTime;\n\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\n\n\t\t\tvar action = this.actions[i];\n\n\t\t\tvar weight = action.getWeightAt( this.time );\n\n\t\t\tvar actionTimeScale = action.getTimeScaleAt( this.time );\n\t\t\tvar actionDeltaTime = mixerDeltaTime * actionTimeScale;\n\n\t\t\tvar actionResults = action.update( actionDeltaTime );\n\n\t\t\tif ( action.weight <= 0 || ! action.enabled ) continue;\n\n\t\t\tfor ( var j = 0; j < actionResults.length; j ++ ) {\n\n\t\t\t\tvar name = action.clip.tracks[j].name;\n\n\t\t\t\taction.propertyBindings[ j ].accumulate( actionResults[j], weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply to nodes\n\t\tfor ( var propertyBindingKey in this.propertyBindingMap ) {\n\n\t\t\tthis.propertyBindingMap[ propertyBindingKey ].apply();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );\n\n// File:src/animation/AnimationUtils.js\n\n/**\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationUtils = {\n\n\tgetEqualsFunc: function( exemplarValue ) {\n\n\t\tif ( exemplarValue.equals ) {\n\t\t\treturn function equals_object( a, b ) {\n\t\t\t\treturn a.equals( b );\n\t\t\t}\n\t\t}\n\n\t\treturn function equals_primitive( a, b ) {\n\t\t\treturn ( a === b );\n\t\t};\n\n\t},\n\n\tclone: function( exemplarValue ) {\n\n\t\tvar typeName = typeof exemplarValue;\n\t\tif ( typeName === \"object\" ) {\n\t\t\tif ( exemplarValue.clone ) {\n\t\t\t\treturn exemplarValue.clone();\n\t\t\t}\n\t\t\tconsole.error( \"can not figure out how to copy exemplarValue\", exemplarValue );\n\t\t}\n\n\t\treturn exemplarValue;\n\n\t},\n\n\tlerp: function( a, b, alpha, interTrack ) {\n\n\t\tvar lerpFunc = THREE.AnimationUtils.getLerpFunc( a, interTrack );\n\n\t\treturn lerpFunc( a, b, alpha );\n\n\t},\n\n\tlerp_object: function( a, b, alpha ) {\n\t\treturn a.lerp( b, alpha );\n\t},\n\n\tslerp_object: function( a, b, alpha ) {\n\t\treturn a.slerp( b, alpha );\n\t},\n\n\tlerp_number: function( a, b, alpha ) {\n\t\treturn a * ( 1 - alpha ) + b * alpha;\n\t},\n\n\tlerp_boolean: function( a, b, alpha ) {\n\t\treturn ( alpha < 0.5 ) ? a : b;\n\t},\n\n\tlerp_boolean_immediate: function( a, b, alpha ) {\n\t\treturn a;\n\t},\n\n\tlerp_string: function( a, b, alpha ) {\n\t\treturn ( alpha < 0.5 ) ? a : b;\n\t},\n\n\tlerp_string_immediate: function( a, b, alpha ) {\n \t\treturn a;\n \t},\n\n\t// NOTE: this is an accumulator function that modifies the first argument (e.g. a).\tThis is to minimize memory alocations.\n\tgetLerpFunc: function( exemplarValue, interTrack ) {\n\n\t\tif ( exemplarValue === undefined || exemplarValue === null ) throw new Error( \"examplarValue is null\" );\n\n\t\tvar typeName = typeof exemplarValue;\n\n\t\tswitch( typeName ) {\n\n\t\t\tcase \"object\":\n\t\t\t\tif ( exemplarValue.lerp ) {\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_object;\n\t\t\t\t}\n\n\t\t\t\tif ( exemplarValue.slerp ) {\n\t\t\t\t\treturn THREE.AnimationUtils.slerp_object;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"number\":\n\t\t\t\treturn THREE.AnimationUtils.lerp_number;\n\n\t\t\tcase \"boolean\":\n\t\t\t\tif ( interTrack ) {\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean;\n\t\t\t\t} else {\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean_immediate;\n\t\t\t\t}\n\n\t\t\tcase \"string\":\n\t\t\t\tif ( interTrack ) {\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_string;\n\t\t\t\t} else {\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_string_immediate;\n\t\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/KeyframeTrack.js\n\n/**\n *\n * A Track that returns a keyframe interpolated value, currently linearly interpolated\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.KeyframeTrack = function ( name, keys ) {\n\n\tif ( name === undefined ) throw new Error( \"track name is undefined\" );\n\tif ( keys === undefined || keys.length === 0 ) throw new Error( \"no keys in track named \" + name );\n\n\tthis.name = name;\n\tthis.keys = keys;\t// time in seconds, value as value\n\n\t// the index of the last result, used as a starting point for local search.\n\tthis.lastIndex = 0;\n\n\tthis.validate();\n\tthis.optimize();\n\n};\n\nTHREE.KeyframeTrack.prototype = {\n\n\tconstructor: THREE.KeyframeTrack,\n\n\tgetAt: function( time ) {\n\n\n\t\t// this can not go higher than this.keys.length.\n\t\twhile( ( this.lastIndex < this.keys.length ) && ( time >= this.keys[this.lastIndex].time ) ) {\n\t\t\tthis.lastIndex ++;\n\t\t};\n\n\t\t// this can not go lower than 0.\n\t\twhile( ( this.lastIndex > 0 ) && ( time < this.keys[this.lastIndex - 1].time ) ) {\n\t\t\tthis.lastIndex --;\n\t\t}\n\n\t\tif ( this.lastIndex >= this.keys.length ) {\n\n\t\t\tthis.setResult( this.keys[ this.keys.length - 1 ].value );\n\n\t\t\treturn this.result;\n\n\t\t}\n\n\t\tif ( this.lastIndex === 0 ) {\n\n\t\t\tthis.setResult( this.keys[ 0 ].value );\n\n\t\t\treturn this.result;\n\n\t\t}\n\n\t\tvar prevKey = this.keys[ this.lastIndex - 1 ];\n\t\tthis.setResult( prevKey.value );\n\n\t\t// if true, means that prev/current keys are identical, thus no interpolation required.\n\t\tif ( prevKey.constantToNext ) {\n\n\t\t\treturn this.result;\n\n\t\t}\n\n\t\t// linear interpolation to start with\n\t\tvar currentKey = this.keys[ this.lastIndex ];\n\t\tvar alpha = ( time - prevKey.time ) / ( currentKey.time - prevKey.time );\n\t\tthis.result = this.lerpValues( this.result, currentKey.value, alpha );\n\n\t\treturn this.result;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\t\t\t\tthis.keys[i].time += timeOffset;\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\t\t\t\tthis.keys[i].time *= timeScale;\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n \ttrim: function( startTime, endTime ) {\n\n\t\tvar firstKeysToRemove = 0;\n\t\tfor ( var i = 1; i < this.keys.length; i ++ ) {\n\t\t\tif ( this.keys[i] <= startTime ) {\n\t\t\t\tfirstKeysToRemove ++;\n\t\t\t}\n\t\t}\n\n\t\tvar lastKeysToRemove = 0;\n\t\tfor ( var i = this.keys.length - 2; i > 0; i ++ ) {\n\t\t\tif ( this.keys[i] >= endTime ) {\n\t\t\t\tlastKeysToRemove ++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// remove last keys first because it doesn't affect the position of the first keys (the otherway around doesn't work as easily)\n\t\tif ( ( firstKeysToRemove + lastKeysToRemove ) > 0 ) {\n\t\t\tthis.keys = this.keys.splice( firstKeysToRemove, this.keys.length - lastKeysToRemove - firstKeysToRemove );;\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t/* NOTE: This is commented out because we really shouldn't have to handle unsorted key lists\n\t         Tracks with out of order keys should be considered to be invalid.  - bhouston\n\tsort: function() {\n\n\t\tthis.keys.sort( THREE.KeyframeTrack.keyComparer );\n\n\t\treturn this;\n\n\t},*/\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t// One could eventually ensure that all key.values in a track are all of the same type (otherwise interpolation makes no sense.)\n\tvalidate: function() {\n\n\t\tvar prevKey = null;\n\n\t\tif ( this.keys.length === 0 ) {\n\t\t\tconsole.error( \"  track is empty, no keys\", this );\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\t\tvar currKey = this.keys[i];\n\n\t\t\tif ( ! currKey ) {\n\t\t\t\tconsole.error( \"  key is null in track\", this, i );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ( typeof currKey.time ) !== 'number' || isNaN( currKey.time ) ) {\n\t\t\t\tconsole.error( \"  key.time is not a valid number\", this, i, currKey );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( currKey.value === undefined || currKey.value === null) {\n\t\t\t\tconsole.error( \"  key.value is null in track\", this, i, currKey );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( prevKey && prevKey.time > currKey.time ) {\n\t\t\t\tconsole.error( \"  key.time is less than previous key time, out of order keys\", this, i, currKey, prevKey );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprevKey = currKey;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// currently only removes equivalent sequential keys (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0), which are common in morph target animations\n\toptimize: function() {\n\n\t\tvar newKeys = [];\n\t\tvar prevKey = this.keys[0];\n\t\tnewKeys.push( prevKey );\n\n\t\tvar equalsFunc = THREE.AnimationUtils.getEqualsFunc( prevKey.value );\n\n\t\tfor ( var i = 1; i < this.keys.length - 1; i ++ ) {\n\t\t\tvar currKey = this.keys[i];\n\t\t\tvar nextKey = this.keys[i+1];\n\n\t\t\t// if prevKey & currKey are the same time, remove currKey.  If you want immediate adjacent keys, use an epsilon offset\n\t\t\t// it is not possible to have two keys at the same time as we sort them.  The sort is not stable on keys with the same time.\n\t\t\tif ( ( prevKey.time === currKey.time ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// remove completely unnecessary keyframes that are the same as their prev and next keys\n\t\t\tif ( this.compareValues( prevKey.value, currKey.value ) && this.compareValues( currKey.value, nextKey.value ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// determine if interpolation is required\n\t\t\tprevKey.constantToNext = this.compareValues( prevKey.value, currKey.value );\n\n\t\t\tnewKeys.push( currKey );\n\t\t\tprevKey = currKey;\n\t\t}\n\t\tnewKeys.push( this.keys[ this.keys.length - 1 ] );\n\n\t\tthis.keys = newKeys;\n\n\t\treturn this;\n\n\t}\n\n};\n\nTHREE.KeyframeTrack.keyComparer = function keyComparator(key0, key1) {\n\treturn key0.time - key1.time;\n};\n\nTHREE.KeyframeTrack.parse = function( json ) {\n\n\tif ( json.type === undefined ) throw new Error( \"track type undefined, can not parse\" );\n\n\tvar trackType = THREE.KeyframeTrack.GetTrackTypeForTypeName( json.type );\n\n\treturn trackType.parse( json );\n\n};\n\nTHREE.KeyframeTrack.GetTrackTypeForTypeName = function( typeName ) {\n\tswitch( typeName.toLowerCase() ) {\n\t \tcase \"vector\":\n\t \tcase \"vector2\":\n\t \tcase \"vector3\":\n\t \tcase \"vector4\":\n\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t \tcase \"quaternion\":\n\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t \tcase \"integer\":\n\t \tcase \"scalar\":\n\t \tcase \"double\":\n\t \tcase \"float\":\n\t \tcase \"number\":\n\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t \tcase \"bool\":\n\t \tcase \"boolean\":\n\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t \tcase \"string\":\n\t \t\treturn THREE.StringKeyframeTrack;\n\t};\n\n\tthrow new Error( \"Unsupported typeName: \" + typeName );\n};\n\n// File:src/animation/PropertyBinding.js\n\n/**\n *\n * A track bound to a real value in the scene graph.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.PropertyBinding = function ( rootNode, trackName ) {\n\n\tthis.rootNode = rootNode;\n\tthis.trackName = trackName;\n\tthis.referenceCount = 0;\n\tthis.originalValue = null; // the value of the property before it was controlled by this binding\n\n\tvar parseResults = THREE.PropertyBinding.parseTrackName( trackName );\n\n\tthis.directoryName = parseResults.directoryName;\n\tthis.nodeName = parseResults.nodeName;\n\tthis.objectName = parseResults.objectName;\n\tthis.objectIndex = parseResults.objectIndex;\n\tthis.propertyName = parseResults.propertyName;\n\tthis.propertyIndex = parseResults.propertyIndex;\n\n\tthis.node = THREE.PropertyBinding.findNode( rootNode, this.nodeName ) || rootNode;\n\n\tthis.cumulativeValue = null;\n\tthis.cumulativeWeight = 0;\n};\n\nTHREE.PropertyBinding.prototype = {\n\n\tconstructor: THREE.PropertyBinding,\n\n\treset: function() {\n\n\t\tthis.cumulativeValue = null;\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\taccumulate: function( value, weight ) {\n\n\t\tif ( ! this.isBound ) this.bind();\n\n\t\tif ( this.cumulativeWeight === 0 ) {\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tif ( this.cumulativeValue === null ) {\n\t\t\t\t\tthis.cumulativeValue = THREE.AnimationUtils.clone( value );\n\t\t\t\t}\n\t\t\t\tthis.cumulativeWeight = weight;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar lerpAlpha = weight / ( this.cumulativeWeight + weight );\n\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, value, lerpAlpha );\n\t\t\tthis.cumulativeWeight += weight;\n\n\t\t}\n\n\t},\n\n\tunbind: function() {\n\n\t\tif ( ! this.isBound ) return;\n\n\t\tthis.setValue( this.originalValue );\n\n\t\tthis.setValue = null;\n\t\tthis.getValue = null;\n\t\tthis.lerpValue = null;\n\t\tthis.equalsValue = null;\n\t\tthis.triggerDirty = null;\n\t\tthis.isBound = false;\n\n\t},\n\n\t// bind to the real property in the scene graph, remember original value, memorize various accessors for speed/inefficiency\n\tbind: function() {\n\n\t\tif ( this.isBound ) return;\n\n\t\tvar targetObject = this.node;\n\n \t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.trackName + \" but it wasn't found.\" );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.objectName ) {\n\t\t\t// special case were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tif ( this.objectName === \"materials\" ) {\n\t\t\t\tif ( ! targetObject.material ) {\n\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t} else if ( this.objectName === \"bones\" ) {\n\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\t\t\t\tif ( targetObject[i].name === this.objectIndex ) {\n\t\t\t\t\t\tthis.objectIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif ( targetObject[ this.objectName ] === undefined ) {\n\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttargetObject = targetObject[ this.objectName ];\n\t\t\t}\n\n\t\t\tif ( this.objectIndex !== undefined ) {\n\t\t\t\tif ( targetObject[ this.objectIndex ] === undefined ) {\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ this.objectIndex ];\n\t\t\t}\n\n\t\t}\n\n \t\t// special case mappings\n \t\tvar nodeProperty = targetObject[ this.propertyName ];\n\t\tif ( ! nodeProperty ) {\n\t\t\tconsole.error( \"  trying to update property for track: \" + this.nodeName + '.' + this.propertyName + \" but it wasn't found.\", targetObject );\n\t\t\treturn;\n\t\t}\n\n\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\tif ( this.propertyIndex !== undefined ) {\n\n\t\t\tif ( this.propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t}\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === this.propertyIndex ) {\n\t\t\t\t\t\tthis.propertyIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setValue = function setValue_propertyIndexed( value ) {\n\t\t\t\tif ( ! this.equalsValue( nodeProperty[ this.propertyIndex ], value ) ) {\n\t\t\t\t\tnodeProperty[ this.propertyIndex ] = value;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\tthis.getValue = function getValue_propertyIndexed() {\n\t\t\t\treturn nodeProperty[ this.propertyIndex ];\n\t\t\t};\n\n\t\t}\n\t\t// must use copy for Object3D.Euler/Quaternion\n\t\telse if ( nodeProperty.copy ) {\n\n\t\t\tthis.setValue = function setValue_propertyObject( value ) {\n\t\t\t\tif ( ! this.equalsValue( nodeProperty, value ) ) {\n\t\t\t\t\tnodeProperty.copy( value );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.getValue = function getValue_propertyObject() {\n\t\t\t\treturn nodeProperty;\n\t\t\t};\n\n\t\t}\n\t\t// otherwise just set the property directly on the node (do not use nodeProperty as it may not be a reference object)\n\t\telse {\n\n\t\t\tthis.setValue = function setValue_property( value ) {\n\t\t\t\tif ( ! this.equalsValue( targetObject[ this.propertyName ], value ) ) {\n\t\t\t\t\ttargetObject[ this.propertyName ] = value;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.getValue = function getValue_property() {\n\t\t\t\treturn targetObject[ this.propertyName ];\n\t\t\t};\n\n\t\t}\n\n\t\t// trigger node dirty\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tthis.triggerDirty = function triggerDirty_needsUpdate() {\n\t\t\t\tthis.node.needsUpdate = true;\n\t\t\t}\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tthis.triggerDirty = function triggerDirty_matrixWorldNeedsUpdate() {\n\t\t\t\ttargetObject.matrixWorldNeedsUpdate = true;\n\t\t\t}\n\n\t\t}\n\n\t\tthis.originalValue = this.getValue();\n\n\t\tthis.equalsValue = THREE.AnimationUtils.getEqualsFunc( this.originalValue );\n\t\tthis.lerpValue = THREE.AnimationUtils.getLerpFunc( this.originalValue, true );\n\n\t\tthis.isBound = true;\n\n\t},\n\n\tapply: function() {\n\n\t\t// for speed capture the setter pattern as a closure (sort of a memoization pattern: https://en.wikipedia.org/wiki/Memoization)\n\t\tif ( ! this.isBound ) this.bind();\n\n\t\t// early exit if there is nothing to apply.\n\t\tif ( this.cumulativeWeight > 0 ) {\n\n\t\t\t// blend with original value\n\t\t\tif ( this.cumulativeWeight < 1 ) {\n\n\t\t\t\tvar remainingWeight = 1 - this.cumulativeWeight;\n\t\t\t\tvar lerpAlpha = remainingWeight / ( this.cumulativeWeight + remainingWeight );\n\t\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, this.originalValue, lerpAlpha );\n\n\t\t\t}\n\n\t\t\tvar valueChanged = this.setValue( this.cumulativeValue );\n\n\t\t\tif ( valueChanged && this.triggerDirty ) {\n\t\t\t\tthis.triggerDirty();\n\t\t\t}\n\n\t\t\t// reset accumulator\n\t\t\tthis.cumulativeValue = null;\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t}\n\t}\n\n};\n\n\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t// matches strings in the form of:\n\t//    nodeName.property\n\t//    nodeName.property[accessor]\n\t//    nodeName.material.property[accessor]\n\t//    uuid.property[accessor]\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t//    parentName/nodeName.property\n\t//    parentName/parentName/nodeName.property[index]\n\t//\t  .bone[Armature.DEF_cog].position\n\t// created and tested via https://regex101.com/#javascript\n\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\tvar matches = re.exec(trackName);\n\n\tif ( ! matches ) {\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t}\n\n    if (matches.index === re.lastIndex) {\n        re.lastIndex++;\n    }\n\n\tvar results = {\n\t\tdirectoryName: matches[1],\n\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\n\t\tobjectName: matches[5],\n\t\tobjectIndex: matches[7],\n\t\tpropertyName: matches[9],\n\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\n\t};\n\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t}\n\n\treturn results;\n\n};\n\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\tfunction searchSkeleton( skeleton ) {\n\n\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\tvar bone = skeleton.bones[i];\n\n\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tfunction searchNodeSubtree( children ) {\n\n\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\tvar childNode = children[i];\n\n\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\treturn childNode;\n\n\t\t\t}\n\n\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\tif ( result ) return result;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t//\n\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\treturn root;\n\n\t}\n\n\t// search into skeleton bones.\n\tif ( root.skeleton ) {\n\n\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\tif ( bone ) {\n\n\t\t\treturn bone;\n\n\t\t}\n\t}\n\n\t// search into node subtree.\n\tif ( root.children ) {\n\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\tif ( subTreeNode ) {\n\n\t\t\treturn subTreeNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n}\n\n// File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Vectors\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.VectorKeyframeTrack = function ( name, keys ) {\n\n\tTHREE.KeyframeTrack.call( this, name, keys );\n\n\t// local cache of value type to avoid allocations during runtime.\n\tthis.result = this.keys[0].value.clone();\n\n};\n\nTHREE.VectorKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\n\nTHREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;\n\nTHREE.VectorKeyframeTrack.prototype.setResult = function( value ) {\n\n\tthis.result.copy( value );\n\n};\n\n// memoization of the lerp function for speed.\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\nTHREE.VectorKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\n\n\treturn value0.lerp( value1, alpha );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\n\n\treturn value0.equals( value1 );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype.clone = function() {\n\n\tvar clonedKeys = [];\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tvar key = this.keys[i];\n\t\tclonedKeys.push( {\n\t\t\ttime: key.time,\n\t\t\tvalue: key.value.clone()\n\t\t} );\n\t}\n\n\treturn new THREE.VectorKeyframeTrack( this.name, clonedKeys );\n\n};\n\nTHREE.VectorKeyframeTrack.parse = function( json ) {\n\n\tvar elementCount = json.keys[0].value.length;\n\tvar valueType = THREE[ 'Vector' + elementCount ];\n\n\tvar keys = [];\n\n\tfor ( var i = 0; i < json.keys.length; i ++ ) {\n\t\tvar jsonKey = json.keys[i];\n\t\tkeys.push( {\n\t\t\tvalue: new valueType().fromArray( jsonKey.value ),\n\t\t\ttime: jsonKey.time\n\t\t} );\n\t}\n\n\treturn new THREE.VectorKeyframeTrack( json.name, keys );\n\n};\n\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Quaternion\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.QuaternionKeyframeTrack = function ( name, keys ) {\n\n\tTHREE.KeyframeTrack.call( this, name, keys );\n\n\t// local cache of value type to avoid allocations during runtime.\n\tthis.result = this.keys[0].value.clone();\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\n\nTHREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;\n\nTHREE.QuaternionKeyframeTrack.prototype.setResult = function( value ) {\n\n\tthis.result.copy( value );\n\n};\n\n// memoization of the lerp function for speed.\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\nTHREE.QuaternionKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\n\n\treturn value0.slerp( value1, alpha );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\n\n\treturn value0.equals( value1 );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype.multiply = function( quat ) {\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tthis.keys[i].value.multiply( quat );\n\n\t}\n\n\treturn this;\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype.clone = function() {\n\n\tvar clonedKeys = [];\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tvar key = this.keys[i];\n\t\tclonedKeys.push( {\n\t\t\ttime: key.time,\n\t\t\tvalue: key.value.clone()\n\t\t} );\n\t}\n\n\treturn new THREE.QuaternionKeyframeTrack( this.name, clonedKeys );\n\n};\n\nTHREE.QuaternionKeyframeTrack.parse = function( json ) {\n\n\tvar keys = [];\n\n\tfor ( var i = 0; i < json.keys.length; i ++ ) {\n\t\tvar jsonKey = json.keys[i];\n\t\tkeys.push( {\n\t\t\tvalue: new THREE.Quaternion().fromArray( jsonKey.value ),\n\t\t\ttime: jsonKey.time\n\t\t} );\n\t}\n\n\treturn new THREE.QuaternionKeyframeTrack( json.name, keys );\n\n};\n\n// File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Strings\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.StringKeyframeTrack = function ( name, keys ) {\n\n\tTHREE.KeyframeTrack.call( this, name, keys );\n\n\t// local cache of value type to avoid allocations during runtime.\n\tthis.result = this.keys[0].value;\n\n};\n\nTHREE.StringKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\n\nTHREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;\n\nTHREE.StringKeyframeTrack.prototype.setResult = function( value ) {\n\n\tthis.result = value;\n\n};\n\n// memoization of the lerp function for speed.\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\nTHREE.StringKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\n\n\treturn ( alpha < 1.0 ) ? value0 : value1;\n\n};\n\nTHREE.StringKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\n\n\treturn ( value0 === value1 );\n\n};\n\nTHREE.StringKeyframeTrack.prototype.clone = function() {\n\n\tvar clonedKeys = [];\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tvar key = this.keys[i];\n\t\tclonedKeys.push( {\n\t\t\ttime: key.time,\n\t\t\tvalue: key.value\n\t\t} );\n\t}\n\n\treturn new THREE.StringKeyframeTrack( this.name, clonedKeys );\n\n};\n\nTHREE.StringKeyframeTrack.parse = function( json ) {\n\n\treturn new THREE.StringKeyframeTrack( json.name, json.keys );\n\n};\n\n// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Boolean\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.BooleanKeyframeTrack = function ( name, keys ) {\n\n\tTHREE.KeyframeTrack.call( this, name, keys );\n\n\t// local cache of value type to avoid allocations during runtime.\n\tthis.result = this.keys[0].value;\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\n\nTHREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;\n\nTHREE.BooleanKeyframeTrack.prototype.setResult = function( value ) {\n\n\tthis.result = value;\n\n};\n\n// memoization of the lerp function for speed.\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\nTHREE.BooleanKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\n\n\treturn ( alpha < 1.0 ) ? value0 : value1;\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\n\n\treturn ( value0 === value1 );\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype.clone = function() {\n\n\tvar clonedKeys = [];\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tvar key = this.keys[i];\n\t\tclonedKeys.push( {\n\t\t\ttime: key.time,\n\t\t\tvalue: key.value\n\t\t} );\n\t}\n\n\treturn new THREE.BooleanKeyframeTrack( this.name, clonedKeys );\n\n};\n\nTHREE.BooleanKeyframeTrack.parse = function( json ) {\n\n\treturn new THREE.BooleanKeyframeTrack( json.name, json.keys );\n\n};\n\n// File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Numbers\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.NumberKeyframeTrack = function ( name, keys ) {\n\n\tTHREE.KeyframeTrack.call( this, name, keys );\n\n\t// local cache of value type to avoid allocations during runtime.\n\tthis.result = this.keys[0].value;\n\n};\n\nTHREE.NumberKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\n\nTHREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;\n\nTHREE.NumberKeyframeTrack.prototype.setResult = function( value ) {\n\n\tthis.result = value;\n\n};\n\n// memoization of the lerp function for speed.\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\nTHREE.NumberKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\n\n\treturn value0 * ( 1 - alpha ) + value1 * alpha;\n\n};\n\nTHREE.NumberKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\n\n\treturn ( value0 === value1 );\n\n};\n\nTHREE.NumberKeyframeTrack.prototype.clone = function() {\n\n\tvar clonedKeys = [];\n\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\tvar key = this.keys[i];\n\t\tclonedKeys.push( {\n\t\t\ttime: key.time,\n\t\t\tvalue: key.value\n\t\t} );\n\t}\n\n\treturn new THREE.NumberKeyframeTrack( this.name, clonedKeys );\n\n};\n\nTHREE.NumberKeyframeTrack.parse = function( json ) {\n\n\treturn new THREE.NumberKeyframeTrack( json.name, json.keys );\n\n};\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function ( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nTHREE.Camera.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\treturn this;\n\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\nTHREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;\n\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\n\n\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\tvar cx = ( this.right + this.left ) / 2;\n\tvar cy = ( this.top + this.bottom ) / 2;\n\n\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\n\n};\n\nTHREE.OrthographicCamera.prototype.copy = function ( source ) {\n\t\n\tTHREE.Camera.prototype.copy.call( this, source );\n\t\n\tthis.left = source.left;\n\tthis.right = source.right;\n\tthis.top = source.top;\n\tthis.bottom = source.bottom;\n\tthis.near = source.near;\n\tthis.far = source.far;\n\t\n\tthis.zoom = source.zoom;\n\t\n\treturn this;\n\t\t\n};\n\nTHREE.OrthographicCamera.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\tdata.object.zoom = this.zoom;\n\tdata.object.left = this.left;\n\tdata.object.right = this.right;\n\tdata.object.top = this.top;\n\tdata.object.bottom = this.bottom;\n\tdata.object.near = this.near;\n\tdata.object.far = this.far;\n\n\treturn data;\n\n};\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.zoom = 1;\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\nTHREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;\n\n\n/**\n * Uses Focal Length (in mm) to estimate and set FOV\n * 35mm (full-frame) camera is used if frame size is not specified;\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\n */\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\n\n\tif ( frameHeight === undefined ) frameHeight = 24;\n\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\n\tthis.updateProjectionMatrix();\n\n};\n\n\n/**\n * Sets an offset in a larger frustum. This is useful for multi-window or\n * multi-monitor/multi-machine setups.\n *\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n * the monitors are in grid like this\n *\n *   +---+---+---+\n *   | A | B | C |\n *   +---+---+---+\n *   | D | E | F |\n *   +---+---+---+\n *\n * then for each monitor you would call it like this\n *\n *   var w = 1920;\n *   var h = 1080;\n *   var fullWidth = w * 3;\n *   var fullHeight = h * 2;\n *\n *   --A--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n *   --B--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n *   --C--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n *   --D--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n *   --E--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n *   --F--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n *\n *   Note there is no reason monitors have to be the same size or in a grid.\n */\n\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\tthis.fullWidth = fullWidth;\n\tthis.fullHeight = fullHeight;\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.updateProjectionMatrix();\n\n};\n\n\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\n\n\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\n\n\tif ( this.fullWidth ) {\n\n\t\tvar aspect = this.fullWidth / this.fullHeight;\n\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\n\t\tvar bottom = - top;\n\t\tvar left = aspect * bottom;\n\t\tvar right = aspect * top;\n\t\tvar width = Math.abs( right - left );\n\t\tvar height = Math.abs( top - bottom );\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\tleft + this.x * width / this.fullWidth,\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\n\t\t\ttop - this.y * height / this.fullHeight,\n\t\t\tthis.near,\n\t\t\tthis.far\n\t\t);\n\n\t} else {\n\n\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\n\n\t}\n\n};\n\nTHREE.PerspectiveCamera.prototype.copy = function ( source ) {\n\t\n\tTHREE.Camera.prototype.copy.call( this, source );\n\t\n\tthis.fov = source.fov;\n\tthis.aspect = source.aspect;\n\tthis.near = source.near;\n\tthis.far = source.far;\n\t\n\tthis.zoom = source.zoom;\n\t\n\treturn this;\n\t\t\n};\n\nTHREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\tdata.object.zoom = this.zoom;\n\tdata.object.fov = this.fov;\n\tdata.object.aspect = this.aspect;\n\tdata.object.near = this.near;\n\tdata.object.far = this.far;\n\n\treturn data;\n\n};\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.receiveShadow = undefined;\n\n};\n\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Light.prototype.constructor = THREE.Light;\n\nObject.defineProperties( THREE.Light.prototype, {\n\tonlyShadow: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.fov = value;\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.left = value;\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.right = value;\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.top = value;\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.bottom = value;\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.near = value;\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.camera.far = value;\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.' );\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.bias = value;\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.darkness = value;\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.mapSize.width = value;\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\t\t\tthis.shadow.mapSize.height = value;\n\t\t}\n\t}\n} );\n\nTHREE.Light.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\treturn this;\n\n};\n\nTHREE.Light.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\tdata.object.color = this.color.getHex();\n\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\tif ( this.intensity !== undefined ) data.object.intensity = this.intensity;\n\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\tif ( this.exponent !== undefined ) data.object.exponent = this.exponent;\n\n\treturn data;\n\n};\n\n// File:src/lights/LightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LightShadow = function ( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.darkness = 1;\n\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = null;\n\n};\n\nTHREE.LightShadow.prototype = {\n\n\tconstructor: THREE.LightShadow,\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.darkness = source.darkness;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n};\n\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\nTHREE.AmbientLight.prototype.constructor = THREE.AmbientLight;\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n\tthis.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 500, 500, 500, - 500, 50, 5000 ) );\n\n};\n\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\nTHREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;\n\nTHREE.DirectionalLight.prototype.copy = function ( source ) {\n\n\tTHREE.Light.prototype.copy.call( this, source );\n\n\tthis.intensity = source.intensity;\n\tthis.target = source.target.clone();\n\n\tthis.shadow = source.shadow.clone();\n\n\treturn this;\n\n};\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n};\n\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\nTHREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;\n\nTHREE.HemisphereLight.prototype.copy = function ( source ) {\n\n\tTHREE.Light.prototype.copy.call( this, source );\n\n\tthis.groundColor.copy( source.groundColor );\n\tthis.intensity = source.intensity;\n\n\treturn this;\n\n};\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'PointLight';\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 1, 500 ) );\n\n};\n\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\nTHREE.PointLight.prototype.constructor = THREE.PointLight;\n\nTHREE.PointLight.prototype.copy = function ( source ) {\n\n\tTHREE.Light.prototype.copy.call( this, source );\n\n\tthis.intensity = source.intensity;\n\tthis.distance = source.distance;\n\tthis.decay = source.decay;\n\n\tthis.shadow = source.shadow.clone();\n\n\treturn this;\n\n};\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 50, 5000 ) );\n\n};\n\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\nTHREE.SpotLight.prototype.constructor = THREE.SpotLight;\n\nTHREE.SpotLight.prototype.copy = function ( source ) {\n\n\tTHREE.Light.prototype.copy.call( this, source );\n\n\tthis.intensity = source.intensity;\n\tthis.distance = source.distance;\n\tthis.angle = source.angle;\n\tthis.exponent = source.exponent;\n\tthis.decay = source.decay;\n\n\tthis.target = source.target.clone();\n\n\tthis.shadow = source.shadow.clone();\n\n\treturn this;\n\n};\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function () {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar color, textureLoader, materialLoader;\n\n\t\treturn function ( m, texturePath, crossOrigin ) {\n\n\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tjson.color = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t// These were never supported\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.XHRLoader.prototype = {\n\n\tconstructor: THREE.XHRLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tif ( onLoad ) {\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tonLoad( cached );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tvar response = event.target.response;\n\n\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\n\t}\n\n};\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ImageLoader.prototype = {\n\n\tconstructor: THREE.ImageLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tif ( onLoad ) {\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tonLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar image = document.createElement( 'img' );\n\n\t\timage.addEventListener( 'load', function ( event ) {\n\n\t\t\tTHREE.Cache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n};\n\nTHREE.JSONLoader.prototype = {\n\n\tconstructor: THREE.JSONLoader,\n\n\t// Deprecated\n\n\tget statusDomElement () {\n\n\t\tif ( this._statusDomElement === undefined ) {\n\n\t\t\tthis._statusDomElement = document.createElement( 'div' );\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\n\t\treturn this._statusDomElement;\n\n\t},\n\n\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tif ( metadata.type === 'object' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( metadata.type === 'scene' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t} );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: function ( json, texturePath ) {\n\n\t\tvar geometry = new THREE.Geometry(),\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\tparseModel( scale );\n\n\t\tparseSkin();\n\t\tparseMorphing( scale );\n\t\tparseAnimations();\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeBoundingSphere();\n\n\t\tfunction parseModel( scale ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\ttype,\n\t\t\tisQuad,\n\t\t\thasMaterial,\n\t\t\thasFaceVertexUv,\n\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\tuvLayer, uv, u, v,\n\n\t\t\tfaces = json.faces,\n\t\t\tvertices = json.vertices,\n\t\t\tnormals = json.normals,\n\t\t\tcolors = json.colors,\n\n\t\t\tnUvLayers = 0;\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction parseSkin() {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction parseMorphing( scale ) {\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations() {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\t\t\tif ( json.animation !== undefined ) {\n\t\t\t\tanimations.push( json.animation );\n\t\t\t}\n\t\t\tif ( json.animations !== undefined ) {\n\t\t\t\tif ( json.animations.length ) {\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\t\t\t\t} else {\n\t\t\t\t\tanimations.push( json.animations );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[i], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t};\n\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\treturn { geometry: geometry };\n\n\t\t} else {\n\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.BufferGeometryLoader.prototype = {\n\n\tconstructor: THREE.BufferGeometryLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new self[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new self[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n};\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.textures = {};\n\n};\n\nTHREE.MaterialLoader.prototype = {\n\n\tconstructor: THREE.MaterialLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tgetTexture: function ( name ) {\n\n\t\tvar textures = this.textures;\n\n\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t}\n\n\t\treturn textures[ name ];\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\t\tmaterial.uuid = json.uuid;\n\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t// for PointsMaterial\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\tif ( json.normalScale )\tmaterial.normalScale = new THREE.Vector2( json.normalScale, json.normalScale );\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) {\n\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t}\n\n\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t// MeshFaceMaterial\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.texturePath = '';\n\n};\n\nTHREE.ObjectLoader.prototype = {\n\n\tconstructor: THREE.ObjectLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE.BoxGeometry(\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.CircleBufferGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.CircleGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.SphereBufferGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.DodecahedronGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OctahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.OctahedronGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.TetrahedronGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.RingGeometry(\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.TorusGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.TorusKnotGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q,\n\t\t\t\t\t\t\tdata.heightScale\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = THREE.AnimationClip.parse( json[i] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value ) {\n\n\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn THREE[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tobject = new THREE.Mesh( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t}()\n\n};\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.TextureLoader.prototype = {\n\n\tconstructor: THREE.TextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/CubeTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.CubeTextureLoader.prototype = {\n\n\tconstructor: THREE.CubeTextureLoader,\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.CubeTexture( [] );\n\n\t\tvar loader = new THREE.ImageLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/BinaryTextureLoader.js\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nTHREE.BinaryTextureLoader.prototype = {\n\n\tconstructor: THREE.BinaryTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.DataTexture();\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\n\nTHREE.CompressedTextureLoader.prototype = {\n\n\tconstructor: THREE.CompressedTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tvar loadTexture = function ( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n \t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.side = THREE.FrontSide;\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blending = THREE.NormalBlending;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = THREE.LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis._needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tget needsUpdate () {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate ( value ) {\n\n\t\tif ( value === true ) this.update();\n\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale; // Removed for now, causes issue in editor ui.js\n\n\t\t}\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\t\tif ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\tif ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.side = source.side;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blending = source.blending;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.alphaTest = source.alphaTest;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\t// Deprecated\n\n\tget wrapAround () {\n\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\n\t},\n\n\tset wrapAround ( boolean ) {\n\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\n\t},\n\n\tget wrapRGB () {\n\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\treturn new THREE.Color();\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\",\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.fog = source.fog;\n\n\treturn this;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>,\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.vertexColors = false;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\t\n\tthis.linewidth = source.linewidth;\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.fog = source.fog;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.fog = source.fog;\n\n\tthis.shading = source.shading;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\t\n\treturn this;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  emissive: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.emissive = new THREE.Color( 0x000000 );\n\n\tthis.map = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.emissive.copy( source.emissive );\n\n\tthis.map = source.map;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.fog = source.fog;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  emissive: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.metal = false;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.emissive.copy( source.emissive );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.metal = source.metal;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissiveMap = source.emissiveMap;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.fog = source.fog;\n\n\tthis.shading = source.shading;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.morphTargets = false;\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  shading: THREE.FlatShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MultiMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MultiMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MultiMaterial';\n\n\tthis.materials = materials instanceof Array ? materials : [];\n\n\tthis.visible = true;\n\n};\n\nTHREE.MultiMaterial.prototype = {\n\n\tconstructor: THREE.MultiMaterial,\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tfor ( var i = 0, l = this.materials.length; i < l; i ++ ) {\n\n\t\t\toutput.materials.push( this.materials[ i ].toJSON() );\n\n\t\t}\n\n\t\toutput.visible = this.visible;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new this.constructor();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t}\n\n};\n\n// backwards compatibility\n\nTHREE.MeshFaceMaterial = THREE.MultiMaterial;\n\n// File:src/materials/PointsMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  vertexColors: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.PointsMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.fog = source.fog;\n\n\treturn this;\n\n};\n\n// backwards compatibility\n\nTHREE.PointCloudMaterial = function ( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new THREE.PointsMaterial( parameters );\n\n};\n\nTHREE.ParticleBasicMaterial = function ( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new THREE.PointsMaterial( parameters );\n\n};\n\nTHREE.ParticleSystemMaterial = function ( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new THREE.PointsMaterial( parameters );\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\n\tthis.lights = false; // set to use scene lights\n\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.derivatives = false; // set to use derivatives\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\tthis.attributes = source.attributes;\n\tthis.defines = source.defines;\n\n\tthis.shading = source.shading;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.fog = source.fog;\n\n\tthis.lights = source.lights;\n\n\tthis.vertexColors = source.vertexColors;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.derivatives = source.derivatives;\n\n\treturn this;\n\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.attributes = this.attributes;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2(),\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\n\t// set parameters\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\tthis.fog = source.fog;\n\n\treturn this;\n\n};\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.sourceFile = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tset needsUpdate ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElement( 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tmeta.textures[ this.uuid ] = output;\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\tuv.multiply( this.repeat );\n\t\tuv.add( this.offset );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/CanvasTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.images = images;\n\tthis.flipY = false;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\nTHREE.CubeTexture.prototype.copy = function ( source ) {\n\n\tTHREE.Texture.prototype.copy.call( this, source );\n\t\n\tthis.images = source.images;\n\t\n\treturn this;\n\n};\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\t\n\tthis.flipY = false;\n\tthis.generateMipmaps  = false;\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tfunction update() {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Group.prototype.constructor = THREE.Group;\n// File:src/objects/Points.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Points = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Points.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Points.prototype.constructor = THREE.Points;\n\nTHREE.Points.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\n\treturn function raycast( raycaster, intersects ) {\n\n\t\tvar object = this;\n\t\tvar geometry = object.geometry;\n\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\tinverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\tvar position = new THREE.Vector3();\n\n\t\tfunction testPoint( point, index ) {\n\n\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\tintersectPoint.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tindex: index,\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: object\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.Points.prototype.clone = function () {\n\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n};\n\n// Backwards compatibility\n\nTHREE.PointCloud = function ( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new THREE.Points( geometry, material );\n\n};\n\nTHREE.ParticleSystem = function ( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new THREE.Points( geometry, material );\n\n};\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new THREE.LineSegments( geometry, material );\n\n\t}\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Line.prototype.constructor = THREE.Line;\n\nTHREE.Line.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\tvar sphere = new THREE.Sphere();\n\n\treturn function raycast( raycaster, intersects ) {\n\n\t\tvar precision = raycaster.linePrecision;\n\t\tvar precisionSq = precision * precision;\n\n\t\tvar geometry = this.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tsphere.copy( geometry.boundingSphere );\n\t\tsphere.applyMatrix4( this.matrixWorld );\n\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tinverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\tvar vStart = new THREE.Vector3();\n\t\tvar vEnd = new THREE.Vector3();\n\t\tvar interSegment = new THREE.Vector3();\n\t\tvar interRay = new THREE.Vector3();\n\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar indices = index.array;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar nbVertices = vertices.length;\n\n\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.Line.prototype.clone = function () {\n\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n};\n\n// DEPRECATED\n\nTHREE.LineStrip = 0;\nTHREE.LinePieces = 1;\n\n// File:src/objects/LineSegments.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LineSegments = function ( geometry, material ) {\n\n\tTHREE.Line.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n};\n\nTHREE.LineSegments.prototype = Object.create( THREE.Line.prototype );\nTHREE.LineSegments.prototype.constructor = THREE.LineSegments;\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Mesh.prototype.constructor = THREE.Mesh;\n\nTHREE.Mesh.prototype.updateMorphTargets = function () {\n\n\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\tthis.morphTargetBase = - 1;\n\t\tthis.morphTargetInfluences = [];\n\t\tthis.morphTargetDictionary = {};\n\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\n\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\treturn this.morphTargetDictionary[ name ];\n\n\t}\n\n\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\treturn 0;\n\n};\n\n\nTHREE.Mesh.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\tvar sphere = new THREE.Sphere();\n\n\tvar vA = new THREE.Vector3();\n\tvar vB = new THREE.Vector3();\n\tvar vC = new THREE.Vector3();\n\n\tvar tempA = new THREE.Vector3();\n\tvar tempB = new THREE.Vector3();\n\tvar tempC = new THREE.Vector3();\n\n\tvar uvA = new THREE.Vector2();\n\tvar uvB = new THREE.Vector2();\n\tvar uvC = new THREE.Vector2();\n\n\tvar barycoord = new THREE.Vector3();\n\n\tvar intersectionPoint = new THREE.Vector3();\n\tvar intersectionPointWorld = new THREE.Vector3();\n\n\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\tuv1.multiplyScalar( barycoord.x );\n\t\tuv2.multiplyScalar( barycoord.y );\n\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\treturn uv1.clone();\n\n\t}\n\n\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ){\n\n\t\tvar intersect;\n\t\tvar material = object.material;\n\n\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) return null;\n\n\t\tintersectionPointWorld.copy( point );\n\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\tvA.fromArray( positions, a * 3 );\n\t\tvB.fromArray( positions, b * 3 );\n\t\tvC.fromArray( positions, c * 3 );\n\n\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uvs ) {\n\n\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t}\n\n\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\tintersection.faceIndex = a;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\treturn function raycast( raycaster, intersects ) {\n\n\t\tvar geometry = this.geometry;\n\t\tvar material = this.material;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\tvar matrixWorld = this.matrixWorld;\n\n\t\tsphere.copy( geometry.boundingSphere );\n\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) return;\n\n\t\t// Check boundingBox before continuing\n\n\t\tinverseMatrix.getInverse( matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tvar uvs, intersection;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar a, b, c;\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.uv !== undefined ){\n\n\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\n\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\ta = i / 3;\n\t\t\t\t\tb = a + 1;\n\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tvar fvA, fvB, fvC;\n\t\t\tvar isFaceMaterial = material instanceof THREE.MeshFaceMaterial;\n\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = faces[ f ];\n\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\tfvA = vA;\n\t\t\t\t\tfvB = vB;\n\t\t\t\t\tfvC = vC;\n\n\t\t\t\t}\n\n\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = face;\n\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.Mesh.prototype.clone = function () {\n\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n};\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( skin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Bone';\n\n\tthis.skin = skin;\n\n};\n\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Bone.prototype.constructor = THREE.Bone;\n\nTHREE.Bone.prototype.copy = function ( source ) {\n\t\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\tthis.skin = source.skin;\n\t\n\treturn this;\n\n};\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\t\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\tsize = Math.max( size, 4 );\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.calculateInverses = function () {\n\n\tthis.boneInverses = [];\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tvar inverse = new THREE.Matrix4();\n\n\t\tif ( this.bones[ b ] ) {\n\n\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t}\n\n\t\tthis.boneInverses.push( inverse );\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.pose = function () {\n\n\tvar bone;\n\n\t// recover the bind-time world matrices\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tbone = this.bones[ b ];\n\n\t\tif ( bone ) {\n\n\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t}\n\n\t}\n\n\t// compute the local matrices, positions, rotations and scales\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tbone = this.bones[ b ];\n\n\t\tif ( bone ) {\n\n\t\t\tif ( bone.parent ) {\n\n\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t}\n\n\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.update = ( function () {\n\n\tvar offsetMatrix = new THREE.Matrix4();\n\n\treturn function update() {\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\n\n\t\t}\n\n\t\tif ( this.useVertexTexture ) {\n\n\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t}\n\n\t};\n\n} )();\n\nTHREE.Skeleton.prototype.clone = function () {\n\n\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n};\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;\n\nTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\n\n\tthis.skeleton = skeleton;\n\n\tif ( bindMatrix === undefined ) {\n\n\t\tthis.updateMatrixWorld( true );\n\t\t\n\t\tthis.skeleton.calculateInverses();\n\n\t\tbindMatrix = this.matrixWorld;\n\n\t}\n\n\tthis.bindMatrix.copy( bindMatrix );\n\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n};\n\nTHREE.SkinnedMesh.prototype.pose = function () {\n\n\tthis.skeleton.pose();\n\n};\n\nTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\n\n\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\n\n\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// skinning weights assumed to be normalized for THREE.BufferGeometry\n\n\t}\n\n};\n\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\n\n\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\tif ( this.bindMode === \"attached\" ) {\n\n\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t}\n\n};\n\nTHREE.SkinnedMesh.prototype.clone = function() {\n\n\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\n\n};\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t},\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\n\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.LOD.prototype.constructor = THREE.LOD;\n\nTHREE.LOD.prototype.addLevel = function ( object, distance ) {\n\n\tif ( distance === undefined ) distance = 0;\n\n\tdistance = Math.abs( distance );\n\n\tvar levels = this.levels;\n\n\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\tthis.add( object );\n\n};\n\nTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\n\n\tvar levels = this.levels;\n\n\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn levels[ i - 1 ].object;\n\n};\n\nTHREE.LOD.prototype.raycast = ( function () {\n\n\tvar matrixPosition = new THREE.Vector3();\n\n\treturn function raycast( raycaster, intersects ) {\n\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t};\n\n}() );\n\nTHREE.LOD.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function update( camera ) {\n\n\t\tvar levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}();\n\nTHREE.LOD.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\tvar levels = source.levels;\n\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\tvar level = levels[ i ];\n\n\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t}\n\n\treturn this;\n\n};\n\nTHREE.LOD.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\tdata.object.levels = [];\n\n\tvar levels = this.levels;\n\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\tvar level = levels[ i ];\n\n\t\tdata.object.levels.push( {\n\t\t\tobject: level.object.uuid,\n\t\t\tdistance: level.distance\n\t\t} );\n\n\t}\n\n\treturn data;\n\n};\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = ( function () {\n\n\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\n\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\n\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\treturn function Sprite( material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n\t};\n\n} )();\n\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Sprite.prototype.constructor = THREE.Sprite;\n\nTHREE.Sprite.prototype.raycast = ( function () {\n\n\tvar matrixPosition = new THREE.Vector3();\n\n\treturn function raycast( raycaster, intersects ) {\n\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\tvar guessSizeSq = this.scale.x * this.scale.y;\n\n\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tintersects.push( {\n\n\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\tpoint: this.position,\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t};\n\n}() );\n\nTHREE.Sprite.prototype.clone = function () {\n\n\treturn new this.constructor( this.material ).copy( this );\n\n};\n\n// Backwards compatibility\n\nTHREE.Particle = THREE.Sprite;\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.LensFlare.prototype.constructor = THREE.LensFlare;\n\n\n/*\n * Add: adds another flare\n */\n\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\n\n\tif ( size === undefined ) size = - 1;\n\tif ( distance === undefined ) distance = 0;\n\tif ( opacity === undefined ) opacity = 1;\n\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\tthis.lensFlares.push( {\n\t\ttexture: texture,\t// THREE.Texture\n\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\tscale: 1, \t\t// scale\n\t\trotation: 0, \t\t// rotation\n\t\topacity: opacity,\t// opacity\n\t\tcolor: color,\t\t// color\n\t\tblending: blending\t// blending\n\t} );\n\n};\n\n/*\n * Update lens flares update positions on all flares based on the screen position\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n */\n\nTHREE.LensFlare.prototype.updateLensFlares = function () {\n\n\tvar f, fl = this.lensFlares.length;\n\tvar flare;\n\tvar vecX = - this.positionScreen.x * 2;\n\tvar vecY = - this.positionScreen.y * 2;\n\n\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\tflare = this.lensFlares[ f ];\n\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.positionScreen.copy( source.positionScreen );\n\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t}\n\n\treturn this;\n\n};\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\tthis.autoUpdate = source.autoUpdate;\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\treturn this;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment'] = \"#ifdef ALPHATEST\\n\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_fragment'] = \"#ifdef USE_AOMAP\\n\\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_pars_fragment'] = \"#ifdef USE_AOMAP\\n\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk[ 'begin_vertex'] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'beginnormal_vertex'] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\\n\\n\\n\tvec2 dHdxy_fwd() {\\n\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\t\treturn vec2( dBx, dBy );\\n\\n\t}\\n\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment'] = \"#ifdef USE_COLOR\\n\\n\tdiffuseColor.rgb *= vColor;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvColor.xyz = color.xyz;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk[ 'common'] = \"#define PI 3.14159\\n#define PI2 6.28318\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\n\\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\\n\\n}\\n\\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\\n\\n}\\n\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\n\treturn - distance * planeNormal + point;\\n\\n}\\n\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n\\n}\\n\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n\\n}\\n\\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\\n\\n\tif ( decayExponent > 0.0 ) {\\n\\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\n\t}\\n\\n\treturn 1.0;\\n\\n}\\n\\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\\n\\n\\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\\n\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n\\n}\\n\\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\\n\\n\\n\treturn 0.25;\\n\\n}\\n\\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\\n\\n\\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n\\n}\\n\\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\\n\\n\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\\n\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\\n\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\n\treturn F * G * D;\\n\\n}\\n\\nvec3 inputToLinear( in vec3 a ) {\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\\nvec3 linearToOutput( in vec3 a ) {\\n\\n\t#ifdef GAMMA_OUTPUT\\n\\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex'] = \"#ifdef FLIP_SIDED\\n\\n\tobjectNormal = -objectNormal;\\n\\n#endif\\n\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\\n\\n\ttotalEmissiveLight *= emissiveColor.rgb;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tuniform sampler2D emissiveMap;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\t\t#else\\n\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t\t#endif\\n\\n\t#else\\n\\n\t\tvec3 reflectVec = vReflect;\\n\\n\t#endif\\n\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\\n\tenvColor.xyz = inputToLinear( envColor.xyz );\\n\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\tuniform float reflectivity;\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tuniform float refractionRatio;\\n\\n\t#else\\n\\n\t\tvarying vec3 vReflect;\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvarying vec3 vReflect;\\n\\n\tuniform float refractionRatio;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\t#else\\n\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment'] = \"#ifdef USE_FOG\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\n\t#else\\n\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\n\t#endif\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\n\t#else\\n\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\n\t#endif\\n\t\\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment'] = \"#ifdef USE_FOG\\n\\n\tuniform vec3 fogColor;\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tuniform float fogDensity;\\n\\n\t#else\\n\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/hemilight_fragment.glsl\n\nTHREE.ShaderChunk[ 'hemilight_fragment'] = \"#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\ttotalAmbientLight += lightColor;\\n\\n\t}\\n\\n#endif\\n\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = \"#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex'] = \"vLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tvLightBack = vec3( 0.0 );\\n\\n#endif\\n\\nvec3 normal = normalize( transformedNormal );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t\t#endif\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\\n\\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment'] = \"vec3 viewDir = normalize( vViewPosition );\\n\\nvec3 totalDiffuseLight = vec3( 0.0 );\\nvec3 totalSpecularLight = vec3( 0.0 );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lightPosition = pointLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment'] = \"uniform vec3 ambientLightColor;\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\tvarying vec3 vNormal;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvWorldPosition = worldPosition.xyz;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl\n\nTHREE.ShaderChunk[ 'linear_to_gamma_fragment'] = \"\\n\toutgoingLight = linearToOutput( outgoingLight );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tuniform float logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n\tuniform float logDepthBufFC;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\\n#else\\n\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment'] = \"#ifdef USE_MAP\\n\\n\tvec4 texelColor = texture2D( map, vUv );\\n\\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\\n\\n\tdiffuseColor *= texelColor;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform sampler2D map;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment'] = \"#ifdef USE_MAP\\n\\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\tuniform float morphTargetInfluences[ 8 ];\\n\\n\t#else\\n\\n\tuniform float morphTargetInfluences[ 4 ];\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'normal_phong_fragment'] = \"#ifndef FLAT_SHADED\\n\\n\tvec3 normal = normalize( vNormal );\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\n\t#endif\\n\\n#else\\n\\n\tvec3 fdx = dFdx( vViewPosition );\\n\tvec3 fdy = dFdy( vViewPosition );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\\n\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk[ 'project_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n\\n#else\\n\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\n#endif\\n\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\\n\\n\t\tfloat shadow = 0.0;\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\tbool isPointLight = shadowDarkness[ i ] < 0.0;\\n\\n\t\tif ( isPointLight ) {\\n\\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\\n\\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tconst float Dr = 1.25;\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tconst float Dr = 2.25;\\n\t#endif\\n\\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\\n\\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\\n\\n\t#else \\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness;\\n\\n\t#endif\\n\\n\t\t} else {\\n\\n#endif \\n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\\n\\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\\n\\n\\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\t\tbool inFrustum = all( inFrustumVec );\\n\\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\t\t\tbool frustumTest = all( frustumTestVec );\\n\\n\t\t\tif ( frustumTest ) {\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\\n\t\t\t\t/*\\n\t\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\\n\t\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\t\t\t\tshadow += 1.0;\\n\t\t\t\t\t}\\n\t\t\t\t\tshadow /= 9.0;\\n\t\t\t\t*/\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\\n\\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tshadow *= shadowDarkness[ i ];\\n\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\\n\\n\t\t\t\tmat3 shadowKernel;\\n\t\t\t\tmat3 depthKernel;\\n\\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\\n\\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\\n\\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\\n\\n\t\t\t\tvec4 shadowValues;\\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\\n\\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\\n\\n\t#else \\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\\n\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\tshadow = shadowDarkness[ i ];\\n\\n\t#endif\\n\\n\t\t\t}\\n\\n#ifdef SHADOWMAP_DEBUG\\n\\n\t\t\tif ( inFrustum ) {\\n\\n\t\t\t\tif ( i == 0 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\\n\\n\t\t\t\t} else if ( i == 1 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\\n\\n\t\t\t\t} else {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\\n\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n#endif\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\t}\\n\\n#endif\\n\\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform float shadowBias[ MAX_SHADOWS ];\\n\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\tfloat depth = dot( rgba_depth, bit_shift );\\n\t\treturn depth;\\n\\n\t}\\n\\n\t#if defined(POINT_LIGHT_SHADOWS)\\n\\n\\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\\n\\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\t\tif ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\\n\t\t\t\tshadowValue += 1.0;\\n\\n\t\t}\\n\\n\\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\n\\n\t\t\tvec3 absV = abs( v );\\n\\n\\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\t\tabsV *= scaleToCube;\\n\\n\\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\n\\n\\n\t\t\tvec2 planar = v.xy;\\n\\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\t\tfloat almostOne = 1.0 - almostATexel;\\n\\n\t\t\tif ( absV.z >= almostOne ) {\\n\\n\t\t\t\tif ( v.z > 0.0 )\\n\t\t\t\t\tplanar.x = 4.0 - v.x;\\n\\n\t\t\t} else if ( absV.x >= almostOne ) {\\n\\n\t\t\t\tfloat signX = sign( v.x );\\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\\n\t\t\t} else if ( absV.y >= almostOne ) {\\n\\n\t\t\t\tfloat signY = sign( v.y );\\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\t\tplanar.y = v.z * signY - 2.0;\\n\\n\t\t\t}\\n\\n\\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\\n\t#ifdef BONE_TEXTURE\\n\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\n\t\t\ty = dy * ( y + 0.5 );\\n\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#else\\n\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment'] = \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\tspecularStrength = 1.0;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\\n\tuniform sampler2D specularMap;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_fragment'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvarying vec2 vUv2;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvUv2 = uv2;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\n\t#ifdef USE_SKINNING\\n\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\\n\t#else\\n\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\n\n\t\t\"map\" : { type: \"t\", value: null },\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"specularMap\" : { type: \"t\", value: null },\n\t\t\"alphaMap\" : { type: \"t\", value: null },\n\n\t\t\"envMap\" : { type: \"t\", value: null },\n\t\t\"flipEnvMap\" : { type: \"f\", value: - 1 },\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\t\"aoMap\" : { type: \"t\", value: null },\n\t\t\"aoMapIntensity\" : { type: \"f\", value: 1 },\n\n\t},\n\n\tlightmap: {\n\n\t\t\"lightMap\" : { type: \"t\", value: null },\n\t\t\"lightMapIntensity\" : { type: \"f\", value: 1 },\n\n\t},\n\n\temissivemap: {\n\n\t\t\"emissiveMap\" : { type: \"t\", value: null },\n\n\t},\n\n\tbumpmap: {\n\n\t\t\"bumpMap\" : { type: \"t\", value: null },\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\" : { type: \"t\", value: null },\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\t\"displacementMap\" : { type: \"t\", value: null },\n\t\t\"displacementScale\" : { type: \"f\", value: 1 },\n\t\t\"displacementBias\" : { type: \"f\", value: 0 }\n\n\t},\n\n\tfog : {\n\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\n\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\n\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\n\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\n\t\t\"pointLightDecay\" : { type: \"fv1\", value: [] },\n\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] },\n\t\t\"spotLightDecay\" : { type: \"fv1\", value: [] }\n\n\t},\n\n\tpoints: {\n\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\n\t\t\"size\" : { type: \"f\", value: 1.0 },\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\n\t\t\"map\" : { type: \"t\", value: null },\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tshadowmap: {\n\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\n\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\n\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\n\t\t\t\"\t#ifdef USE_ENVMAP\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\n\t\t\t\"\tvec3 totalAmbientLight = vec3( 1.0 );\", // hardwired\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\"\toutgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"#define LAMBERT\",\n\n\t\t\t\"varying vec3 vLightFront;\",\n\n\t\t\t\"#ifdef DOUBLE_SIDED\",\n\n\t\t\t\"\tvarying vec3 vLightBack;\",\n\n\t\t\t\"#endif\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform vec3 emissive;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform vec3 ambientLightColor;\",\n\n\t\t\t\"varying vec3 vLightFront;\",\n\n\t\t\t\"#ifdef DOUBLE_SIDED\",\n\n\t\t\t\"\tvarying vec3 vLightBack;\",\n\n\t\t\t\"#endif\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\t// outgoing light does not have an alpha, the surface does\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\n\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\"\t#ifdef DOUBLE_SIDED\",\n\n\t\t\t\"\t\tif ( gl_FrontFacing )\",\n\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\n\t\t\t\"\t\telse\",\n\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\n\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\n\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\n\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\n\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"#define PHONG\",\n\n\t\t\t\"varying vec3 vViewPosition;\",\n\n\t\t\t\"#ifndef FLAT_SHADED\",\n\n\t\t\t\"\tvarying vec3 vNormal;\",\n\n\t\t\t\"#endif\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"displacementmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\"#ifndef FLAT_SHADED\", // Normal computed with derivatives when FLAT_SHADED\n\n\t\t\t\"\tvNormal = normalize( transformedNormal );\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"displacementmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"\tvViewPosition = - mvPosition.xyz;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define PHONG\",\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform vec3 emissive;\",\n\t\t\t\"uniform vec3 specular;\",\n\t\t\t\"uniform float shininess;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"emissivemap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\n\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\n\t\t\t\"\tvec3 totalEmissiveLight = emissive;\",\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"normal_phong_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"hemilight_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"emissivemap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\t\"totalDiffuseLight *= shadowMask;\",\n\t\t\t\t\"totalSpecularLight *= shadowMask;\",\n\n\t\t\t\t\"#ifdef METAL\",\n\n\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\",\n\n\t\t\t\t\"#else\",\n\n\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\",\n\n\t\t\t\t\"#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'points': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"points\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform float size;\",\n\t\t\t\"uniform float scale;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"\t#ifdef USE_SIZEATTENUATION\",\n\t\t\t\"\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\t\tgl_PointSize = size;\",\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 psColor;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\n\t\t\t\"\tvec4 diffuseColor = vec4( psColor, opacity );\",\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\"\toutgoingLight = diffuseColor.rgb * shadowMask;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\n\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform float scale;\",\n\t\t\t\"attribute float lineDistance;\",\n\n\t\t\t\"varying float vLineDistance;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\"\tvLineDistance = scale * lineDistance;\",\n\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform float dashSize;\",\n\t\t\t\"uniform float totalSize;\",\n\n\t\t\t\"varying float vLineDistance;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\",\n\n\t\t\t\"\t\tdiscard;\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\n\t\t\t\"\toutgoingLight = diffuseColor.rgb;\", // simple shader\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: {\n\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float mNear;\",\n\t\t\t\"uniform float mFar;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\n\n\t\t\t\"\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\",\n\t\t\t\"\tgl_FragColor = vec4( vec3( color ), opacity );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform samplerCube tCube;\",\n\t\t\t\"uniform float tFlip;\",\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'equirect': {\n\n\t\tuniforms: { \"tEquirect\": { type: \"t\", value: null },\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tEquirect;\",\n\t\t\t\"uniform float tFlip;\",\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t// \"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\n\t\t\t\t\"vec3 direction = normalize( vWorldPosition );\",\n\t\t\t\t\"vec2 sampleUV;\",\n\t\t\t\t\"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\",\n\t\t\t\t\"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\t\t\t\t\"gl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\t/* Depth encoding into RGBA texture\n\t *\n\t * based on SpiderGL shadow map example\n\t * http://spidergl.org/example.php?id=6\n\t *\n\t * originally from\n\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\n\t *\n\t * see also\n\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n\t */\n\n\t'depthRGBA': {\n\n\t\tuniforms: {},\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\n\n\t\t\t\"\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\n\t\t\t\"\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\n\t\t\t\"\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\", // \"\tvec4 res = fract( depth * bit_shift );\",\n\t\t\t\"\tres -= res.xxyz * bit_mask;\",\n\t\t\t\"\treturn res;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\n\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t},\n\n\n\t'distanceRGBA': {\n\n\t\tuniforms: {\n\n\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec4 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\n\t\t\t\t\"vWorldPosition = worldPosition;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 lightPos;\",\n\t\t\t\"varying vec4 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\n\t\t\t\"vec4 pack1K ( float depth ) {\",\n\n\t\t\t\"   depth /= 1000.0;\",\n\t\t\t\"   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\n  \t\t\t\"\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\n   \t\t\t\"\tvec4 res = fract( depth * bitSh );\",\n   \t\t\t\"\tres -= res.xxyz * bitMsk;\",\n   \t\t\t\"\treturn res; \",\n\n\t\t\t\"}\",\n\n\t\t\t\"float unpack1K ( vec4 color ) {\",\n\n\t\t\t\"\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\n\t\t\t\"\treturn dot( color, bitSh ) * 1000.0;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main () {\",\n\n\t\t\t\"\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_width = _canvas.width,\n\t_height = _canvas.height,\n\n\tpixelRatio = 1,\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0;\n\n\tvar lights = [];\n\n\tvar opaqueObjects = [];\n\tvar opaqueObjectsLastIndex = - 1;\n\tvar transparentObjects = [];\n\tvar transparentObjectsLastIndex = - 1;\n\n\tvar morphInfluences = new Float32Array( 8 );\n\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// flags\n\n\tthis.autoScaleCubemaps = true;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryProgram = '',\n\t_currentCamera = null,\n\n\t_usedTextureUnits = 0,\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvas.width,\n\t_viewportHeight = _canvas.height,\n\t_currentWidth = 0,\n\t_currentHeight = 0,\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t // camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_direction = new THREE.Vector3(),\n\n\t_lightsNeedUpdate = true,\n\n\t_lights = {\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: { length: 0, colors: [], positions: [] },\n\t\tpoint: { length: 0, colors: [], positions: [], distances: [], decays: [] },\n\t\tspot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] },\n\t\themi: { length: 0, skyColors: [], groundColors: [], positions: [] }\n\n\t},\n\n\t// info\n\n\t_infoMemory = {\n\n\t\tgeometries: 0,\n\t\ttextures: 0\n\n\t},\n\n\t_infoRender = {\n\n\t\tcalls: 0,\n\t\tvertices: 0,\n\t\tfaces: 0,\n\t\tpoints: 0\n\n\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: _infoMemory,\n\t\tprograms: null\n\n\t};\n\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_texture_half_float' );\n\textensions.get( 'OES_texture_half_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\textensions.get( 'ANGLE_instanced_arrays' );\n\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t}\n\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\tvar properties = new THREE.WebGLProperties();\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\n\tthis.info.programs = programCache.programs;\n\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t//\n\n\tfunction glClearColor( r, g, b, a ) {\n\n\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\tr *= a; g *= a; b *= a;\n\n\t\t}\n\n\t\t_gl.clearColor( r, g, b, a );\n\n\t}\n\n\tfunction setDefaultGLState() {\n\n\t\tstate.init();\n\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tfunction resetGLState() {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\n\t\t_lightsNeedUpdate = true;\n\n\t\tstate.reset();\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\tthis.capabilities = capabilities;\n\tthis.extensions = extensions;\n\tthis.state = state;\n\n\t// shadow map\n\n\tvar shadowMap = new THREE.WebGLShadowMap( this, lights, objects );\n\n\tthis.shadowMap = shadowMap;\n\n\n\t// Plugins\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t};\n\n\tthis.getMaxAnisotropy = ( function () {\n\n\t\tvar value;\n\n\t\treturn function getMaxAnisotropy() {\n\n\t\t\tif ( value !== undefined ) return value;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tvalue = 0;\n\n\t\t\t}\n\n\t\t\treturn value;\n\n\t\t}\n\n\t} )();\n\n\tthis.getPrecision = function () {\n\n\t\treturn capabilities.precision;\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) pixelRatio = value;\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * pixelRatio;\n\t\t_canvas.height = height * pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * pixelRatio;\n\t\t_viewportY = y * pixelRatio;\n\n\t\t_viewportWidth = width * pixelRatio;\n\t\t_viewportHeight = height * pixelRatio;\n\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n\t};\n\n\tthis.getViewport = function ( dimensions ) {\n\n\t\tdimensions.x = _viewportX / pixelRatio;\n\t\tdimensions.y = _viewportY / pixelRatio;\n\n\t\tdimensions.z = _viewportWidth / pixelRatio;\n\t\tdimensions.w = _viewportHeight / pixelRatio;\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t_gl.scissor(\n\t\t\tx * pixelRatio,\n\t\t\ty * pixelRatio,\n\t\t\twidth * pixelRatio,\n\t\t\theight * pixelRatio\n\t\t);\n\n\t};\n\n\tthis.enableScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t_clearAlpha = alpha;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\t_gl.clear( _gl.COLOR_BUFFER_BIT );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\t_gl.clear( _gl.DEPTH_BUFFER_BIT );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\t_gl.clear( _gl.STENCIL_BUFFER_BIT );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = resetGLState;\n\n\tthis.dispose = function() {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tresetGLState();\n\t\tsetDefaultGLState();\n\n\t\tproperties.clear();\n\n\t};\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_infoMemory.textures --;\n\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_infoMemory.textures --;\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.delete( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer );\n\n\t\t}\n\n\t\tproperties.delete( renderTarget.texture );\n\t\tproperties.delete( renderTarget );\n\n\t}\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.delete( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, lights, fog, geometry, material, object, group ) {\n\n\t\tsetMaterial( material );\n\n\t\tvar program = setProgram( camera, lights, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\tvar activeInfluences = [];\n\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t}\n\n\t\t\tactiveInfluences.sort( numericalSort );\n\n\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = program.getUniforms();\n\n\t\t\tif ( uniforms.morphTargetInfluences !== null ) {\n\n\t\t\t\t_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t}\n\n\t\tvar renderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( index );\n\n\t\t} else {\n\n\t\t\trenderer = bufferRenderer;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataStart = 0;\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start;\n\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\tvar groupStart = group !== null ? group.start : 0;\n\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t//\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * pixelRatio );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * pixelRatio );\n\n\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar extension;\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Sorting\n\n\tfunction numericalSort ( a, b ) {\n\n\t\treturn b[ 0 ] - a[ 0 ];\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\t\t_lightsNeedUpdate = true;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\n\t\topaqueObjectsLastIndex = - 1;\n\t\ttransparentObjectsLastIndex = - 1;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\tprojectObject( scene, camera );\n\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t//\n\n\t\tshadowMap.render( scene );\n\n\t\t//\n\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog, overrideMaterial );\n\t\t\trenderObjects( transparentObjects, camera, lights, fog, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, lights, fog );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\t\tif ( texture.generateMipmaps && isTargetPowerOfTwo && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\t updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.setDepthTest( true );\n\t\tstate.setDepthWrite( true );\n\t\tstate.setColorWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\tvar array, index;\n\n\t\t// allocate the next position in the appropriate array\n\n\t\tif ( material.transparent ) {\n\n\t\t\tarray = transparentObjects;\n\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t} else {\n\n\t\t\tarray = opaqueObjects;\n\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t}\n\n\t\t// recycle existing render item or grow the array\n\n\t\tvar renderItem = array[ index ];\n\n\t\tif ( renderItem !== undefined ) {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.z = _vector3.z;\n\t\t\trenderItem.group = group;\n\n\t\t} else {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tz: _vector3.z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\t// assert( index === array.length );\n\t\t\tarray.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( ( object.channels.mask & camera.channels.mask ) !== 0 ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tsprites.push( object );\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, lights, fog, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tsetMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, lights, fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, lights, fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initMaterial( material, lights, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters( material, lights, fog, object );\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tmaterialProperties.uniformsList = [];\n\n\t\tvar uniformLocations = materialProperties.program.getUniforms();\n\n\t\tfor ( var u in materialProperties.__webglShader.uniforms ) {\n\n\t\t\tvar location = uniformLocations[ u ];\n\n\t\t\tif ( location ) {\n\n\t\t\t\tmaterialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setMaterial( material ) {\n\n\t\tsetMaterialFaces( material );\n\n\t\tif ( material.transparent === true ) {\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );\n\n\t\t} else {\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t}\n\n\t\tstate.setDepthFunc( material.depthFunc );\n\t\tstate.setDepthTest( material.depthTest );\n\t\tstate.setDepthWrite( material.depthWrite );\n\t\tstate.setColorWrite( material.colorWrite );\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\tfunction setMaterialFaces( material ) {\n\n\t\tmaterial.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t}\n\n\tfunction setProgram( camera, lights, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( material.needsUpdate || ! materialProperties.program ) {\n\n\t\t\tinitMaterial( material, lights, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\tif ( _currentMaterialId === - 1 ) refreshLights = true;\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tif ( p_uniforms.cameraPosition !== undefined ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tif ( p_uniforms.viewMatrix !== undefined ) {\n\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {\n\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\n\n\t\t\t}\n\n\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {\n\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\n\n\t\t\t}\n\n\t\t\tif ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\t\tif ( p_uniforms.boneTexture !== undefined ) {\n\n\t\t\t\t\tvar textureUnit = getTextureUnit();\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\n\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p_uniforms.boneTextureWidth !== undefined ) {\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p_uniforms.boneTextureHeight !== undefined ) {\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\n\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== undefined ) {\n\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material.lights ) {\n\n\t\t\t\tif ( _lightsNeedUpdate ) {\n\n\t\t\t\t\trefreshLights = true;\n\t\t\t\t\tsetupLights( lights, camera );\n\t\t\t\t\t_lightsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( refreshLights ) {\n\n\t\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, true );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tm_uniforms.mNear.value = camera.near;\n\t\t\t\tm_uniforms.mFar.value = camera.far;\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\n\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights, camera );\n\n\t\t\t}\n\n\t\t\t// load common uniforms\n\n\t\t\tloadUniformsGeneric( materialProperties.uniformsList );\n\n\t\t}\n\n\t\tloadUniformsMatrices( p_uniforms, object );\n\n\t\tif ( p_uniforms.modelMatrix !== undefined ) {\n\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tuniforms.diffuse.value = material.color;\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value = material.emissive;\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) uvScaleMap = uvScaleMap.texture;\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\n\n\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsParticle ( uniforms, material ) {\n\n\t\tuniforms.psColor.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size;\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tvar offset = material.map.offset;\n\t\t\tvar repeat = material.map.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLights ( uniforms, lights ) {\n\n\t\tuniforms.ambientLightColor.value = lights.ambient;\n\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\n\n\t\tuniforms.pointLightColor.value = lights.point.colors;\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\n\t\tuniforms.pointLightDecay.value = lights.point.decays;\n\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\n\t\tuniforms.spotLightDecay.value = lights.spot.decays;\n\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLightColor.needsUpdate = value;\n\t\tuniforms.directionalLightDirection.needsUpdate = value;\n\n\t\tuniforms.pointLightColor.needsUpdate = value;\n\t\tuniforms.pointLightPosition.needsUpdate = value;\n\t\tuniforms.pointLightDistance.needsUpdate = value;\n\t\tuniforms.pointLightDecay.needsUpdate = value;\n\n\t\tuniforms.spotLightColor.needsUpdate = value;\n\t\tuniforms.spotLightPosition.needsUpdate = value;\n\t\tuniforms.spotLightDistance.needsUpdate = value;\n\t\tuniforms.spotLightDirection.needsUpdate = value;\n\t\tuniforms.spotLightAngleCos.needsUpdate = value;\n\t\tuniforms.spotLightExponent.needsUpdate = value;\n\t\tuniforms.spotLightDecay.needsUpdate = value;\n\n\t\tuniforms.hemisphereLightSkyColor.needsUpdate = value;\n\t\tuniforms.hemisphereLightGroundColor.needsUpdate = value;\n\t\tuniforms.hemisphereLightDirection.needsUpdate = value;\n\n\t}\n\n\tfunction refreshUniformsShadow ( uniforms, lights, camera ) {\n\n\t\tif ( uniforms.shadowMatrix ) {\n\n\t\t\tvar j = 0;\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( light.castShadow === true ) {\n\n\t\t\t\t\tif ( light instanceof THREE.PointLight || light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t\t\t\tshadow.matrix.identity().setPosition( _vector3 );\n\n\t\t\t\t\t\t\t// for point lights we set the sign of the shadowDarkness uniform to be negative\n\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = - shadow.darkness;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = shadow.darkness;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = shadow.matrix;\n\t\t\t\t\t\tuniforms.shadowMap.value[ j ] = shadow.map;\n\t\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowBias.value[ j ] = shadow.bias;\n\n\t\t\t\t\t\tj ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Uniforms (load to GPU)\n\n\tfunction loadUniformsMatrices ( uniforms, object ) {\n\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );\n\n\t\tif ( uniforms.normalMatrix ) {\n\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );\n\n\t\t}\n\n\t}\n\n\tfunction getTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction loadUniformsGeneric ( uniforms ) {\n\n\t\tvar texture, textureUnit;\n\n\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\n\n\t\t\tvar uniform = uniforms[ j ][ 0 ];\n\n\t\t\t// needsUpdate property is not added to all uniforms.\n\t\t\tif ( uniform.needsUpdate === false ) continue;\n\n\t\t\tvar type = uniform.type;\n\t\t\tvar value = uniform.value;\n\t\t\tvar location = uniforms[ j ][ 1 ];\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase '1i':\n\t\t\t\t\t_gl.uniform1i( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1f':\n\t\t\t\t\t_gl.uniform1f( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '2f':\n\t\t\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3f':\n\t\t\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '4f':\n\t\t\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1iv':\n\t\t\t\t\t_gl.uniform1iv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3iv':\n\t\t\t\t\t_gl.uniform3iv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1fv':\n\t\t\t\t\t_gl.uniform1fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '2fv':\n\t\t\t\t\t_gl.uniform2fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3fv':\n\t\t\t\t\t_gl.uniform3fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '4fv':\n\t\t\t\t\t_gl.uniform4fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Matrix3fv':\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Matrix4fv':\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\t//\n\n\t\t\t\tcase 'i':\n\n\t\t\t\t\t// single integer\n\t\t\t\t\t_gl.uniform1i( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'f':\n\n\t\t\t\t\t// single float\n\t\t\t\t\t_gl.uniform1f( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v2':\n\n\t\t\t\t\t// single THREE.Vector2\n\t\t\t\t\t_gl.uniform2f( location, value.x, value.y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v3':\n\n\t\t\t\t\t// single THREE.Vector3\n\t\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v4':\n\n\t\t\t\t\t// single THREE.Vector4\n\t\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'c':\n\n\t\t\t\t\t// single THREE.Color\n\t\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'iv1':\n\n\t\t\t\t\t// flat array of integers (JS or typed array)\n\t\t\t\t\t_gl.uniform1iv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'iv':\n\n\t\t\t\t\t// flat array of integers with 3 x N size (JS or typed array)\n\t\t\t\t\t_gl.uniform3iv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'fv1':\n\n\t\t\t\t\t// flat array of floats (JS or typed array)\n\t\t\t\t\t_gl.uniform1fv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'fv':\n\n\t\t\t\t\t// flat array of floats with 3 x N size (JS or typed array)\n\t\t\t\t\t_gl.uniform3fv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v2v':\n\n\t\t\t\t\t// array of THREE.Vector2\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {\n\n\t\t\t\t\t\tuniform._array[ i2 + 0 ] = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ i2 + 1 ] = value[ i ].y;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform2fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v3v':\n\n\t\t\t\t\t// array of THREE.Vector3\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {\n\n\t\t\t\t\t\tuniform._array[ i3 + 0 ] = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ i3 + 1 ] = value[ i ].y;\n\t\t\t\t\t\tuniform._array[ i3 + 2 ] = value[ i ].z;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform3fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v4v':\n\n\t\t\t\t\t// array of THREE.Vector4\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {\n\n\t\t\t\t\t\tuniform._array[ i4 + 0 ] = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ i4 + 1 ] = value[ i ].y;\n\t\t\t\t\t\tuniform._array[ i4 + 2 ] = value[ i ].z;\n\t\t\t\t\t\tuniform._array[ i4 + 3 ] = value[ i ].w;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform4fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm3':\n\n\t\t\t\t\t// single THREE.Matrix3\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm3v':\n\n\t\t\t\t\t// array of THREE.Matrix3\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm4':\n\n\t\t\t\t\t// single THREE.Matrix4\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm4v':\n\n\t\t\t\t\t// array of THREE.Matrix4\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 't':\n\n\t\t\t\t\t// single THREE.Texture (2d or cube)\n\n\t\t\t\t\ttexture = value;\n\t\t\t\t\ttextureUnit = getTextureUnit();\n\n\t\t\t\t\t_gl.uniform1i( location, textureUnit );\n\n\t\t\t\t\tif ( ! texture ) continue;\n\n\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\n\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\n\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tv':\n\n\t\t\t\t\t// array of THREE.Texture (2d or cube)\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform1iv( location, uniform._array );\n\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\ttexture = uniform.value[ i ];\n\t\t\t\t\t\ttextureUnit = uniform._array[ i ];\n\n\t\t\t\t\t\tif ( ! texture ) continue;\n\n\t\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t\t\t\t ( texture.image instanceof Array && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\n\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\n\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setColorLinear( array, offset, color, intensity ) {\n\n\t\tarray[ offset + 0 ] = color.r * intensity;\n\t\tarray[ offset + 1 ] = color.g * intensity;\n\t\tarray[ offset + 2 ] = color.b * intensity;\n\n\t}\n\n\tfunction setupLights ( lights, camera ) {\n\n\t\tvar l, ll, light,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor, skyColor, groundColor,\n\t\tintensity,\n\t\tdistance,\n\n\t\tzlights = _lights,\n\n\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\tdirColors = zlights.directional.colors,\n\t\tdirPositions = zlights.directional.positions,\n\n\t\tpointColors = zlights.point.colors,\n\t\tpointPositions = zlights.point.positions,\n\t\tpointDistances = zlights.point.distances,\n\t\tpointDecays = zlights.point.decays,\n\n\t\tspotColors = zlights.spot.colors,\n\t\tspotPositions = zlights.spot.positions,\n\t\tspotDistances = zlights.spot.distances,\n\t\tspotDirections = zlights.spot.directions,\n\t\tspotAnglesCos = zlights.spot.anglesCos,\n\t\tspotExponents = zlights.spot.exponents,\n\t\tspotDecays = zlights.spot.decays,\n\n\t\themiSkyColors = zlights.hemi.skyColors,\n\t\themiGroundColors = zlights.hemi.groundColors,\n\t\themiPositions = zlights.hemi.positions,\n\n\t\tdirLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0,\n\n\t\tdirCount = 0,\n\t\tpointCount = 0,\n\t\tspotCount = 0,\n\t\themiCount = 0,\n\n\t\tdirOffset = 0,\n\t\tpointOffset = 0,\n\t\tspotOffset = 0,\n\t\themiOffset = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tr += color.r;\n\t\t\t\tg += color.g;\n\t\t\t\tb += color.b;\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tdirCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t_direction.sub( _vector3 );\n\t\t\t\t_direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirOffset = dirLength * 3;\n\n\t\t\t\tdirPositions[ dirOffset + 0 ] = _direction.x;\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\n\n\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\n\n\t\t\t\tdirLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tpointCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tpointOffset = pointLength * 3;\n\n\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\n\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointPositions[ pointOffset + 0 ] = _vector3.x;\n\t\t\t\tpointPositions[ pointOffset + 1 ] = _vector3.y;\n\t\t\t\tpointPositions[ pointOffset + 2 ] = _vector3.z;\n\n\t\t\t\t// distance is 0 if decay is 0, because there is no attenuation at all.\n\t\t\t\tpointDistances[ pointLength ] = distance;\n\t\t\t\tpointDecays[ pointLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tpointLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tspotCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tspotOffset = spotLength * 3;\n\n\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.copy( _direction ).applyMatrix4( viewMatrix );\n\n\t\t\t\tspotPositions[ spotOffset + 0 ] = _vector3.x;\n\t\t\t\tspotPositions[ spotOffset + 1 ] = _vector3.y;\n\t\t\t\tspotPositions[ spotOffset + 2 ] = _vector3.z;\n\n\t\t\t\tspotDistances[ spotLength ] = distance;\n\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t_direction.sub( _vector3 );\n\t\t\t\t_direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotDirections[ spotOffset + 0 ] = _direction.x;\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\n\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\n\t\t\t\tspotDecays[ spotLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tspotLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\themiCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_direction.transformDirection( viewMatrix );\n\n\t\t\t\themiOffset = hemiLength * 3;\n\n\t\t\t\themiPositions[ hemiOffset + 0 ] = _direction.x;\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\n\n\t\t\t\tskyColor = light.color;\n\t\t\t\tgroundColor = light.groundColor;\n\n\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\n\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\n\n\t\t\t\themiLength += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// null eventual remains from removed lights\n\t\t// (this is to avoid if in shader)\n\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\n\n\t\tzlights.directional.length = dirLength;\n\t\tzlights.point.length = pointLength;\n\t\tzlights.spot.length = spotLength;\n\t\tzlights.hemi.length = hemiLength;\n\n\t\tzlights.ambient[ 0 ] = r;\n\t\tzlights.ambient[ 1 ] = g;\n\t\tzlights.ambient[ 2 ] = b;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tif ( cullFace === THREE.CullFaceNone ) {\n\n\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\t} else {\n\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\n\n\t\t\t\t_gl.frontFace( _gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.frontFace( _gl.CCW );\n\n\t\t\t}\n\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t_gl.cullFace( _gl.BACK );\n\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t_gl.cullFace( _gl.FRONT );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\n\n\t\t\t}\n\n\t\t\tstate.enable( _gl.CULL_FACE );\n\n\t\t}\n\n\t};\n\n\t// Textures\n\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\n\n\t\tvar extension;\n\n\t\tif ( isImagePowerOfTwo ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\ttexture.image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false ) {\n\n\t\t\ttexture.image = makePowerOfTwo( texture.image );\n\n\t\t}\n\n\t\tvar image = texture.image,\n\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tthis.setTexture = function ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t};\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction setCubeTexture ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setCubeTextureDynamic ( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\t// Render targets\n\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\n\t}\n\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\n\t\t} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\t*/\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t}\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t\t// Setup texture, create render and frame buffers\n\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget ),\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.texture.format ),\n\t\t\t\tglType = paramThreeToGL( renderTarget.texture.type );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\t\t\trenderTargetProperties.__webglRenderbuffer = [];\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\n\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\n\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t}\n\n\t\t\t// Release everything\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\tvar framebuffer, width, height, vx, vy;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\twidth = renderTarget.width;\n\t\t\theight = renderTarget.height;\n\n\t\t\tvx = 0;\n\t\t\tvy = 0;\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\twidth = _viewportWidth;\n\t\t\theight = _viewportHeight;\n\n\t\t\tvx = _viewportX;\n\t\t\tvy = _viewportY;\n\n\t\t}\n\n\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.viewport( vx, vy, width, height );\n\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );\n\n\t\t}\n\n\t\t_currentWidth = width;\n\t\t_currentHeight = height;\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat\n\t\t\t\t\t&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType\n\t\t\t\t\t&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )\n\t\t\t\t\t&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )\n\t\t\t\t\t&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\n\n\t\tstate.bindTexture( target, texture );\n\t\t_gl.generateMipmap( target );\n\t\tstate.bindTexture( target, null );\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\t// DEPRECATED\n\n\tthis.supportsFloatTextures = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn extensions.get( 'OES_texture_float' );\n\n\t};\n\n\tthis.supportsHalfFloatTextures = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn extensions.get( 'OES_texture_half_float' );\n\n\t};\n\n\tthis.supportsStandardDerivatives = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn extensions.get( 'OES_standard_derivatives' );\n\n\t};\n\n\tthis.supportsCompressedTextureS3TC = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t};\n\n\tthis.supportsCompressedTexturePVRTC = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t};\n\n\tthis.supportsBlendMinMax = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn extensions.get( 'EXT_blend_minmax' );\n\n\t};\n\n\tthis.supportsVertexTextures = function () {\n\n\t\treturn capabilities.vertexTextures;\n\n\t};\n\n\tthis.supportsInstancedArrays = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn extensions.get( 'ANGLE_instanced_arrays' );\n\n\t};\n\n\t//\n\n\tthis.initMaterial = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t};\n\n\tthis.addPrePlugin = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t};\n\n\tthis.addPostPlugin = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t};\n\n\tthis.updateShadowMap = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t};\n\n\tObject.defineProperties( this, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tshadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tshadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\treturn shadowMap.cullFace;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tshadowMap.cullFace = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapDebug: {\n\t\t\tget: function () {\n\n\t\t\t\treturn shadowMap.debug;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.' );\n\t\t\t\tshadowMap.debug = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\n\tthis.shareDepthFrom = options.shareDepthFrom !== undefined ? options.shareDepthFrom : null;\n\n};\n\nTHREE.WebGLRenderTarget.prototype = {\n\n\tconstructor: THREE.WebGLRenderTarget,\n\n\tget wrapS() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\n\t\treturn this.texture.wrapS;\n\n\t},\n\n\tset wrapS( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\n\t\tthis.texture.wrapS = value;\n\n\t},\n\n\tget wrapT() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\n\t\treturn this.texture.wrapT;\n\n\t},\n\n\tset wrapT( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\n\t\tthis.texture.wrapT = value;\n\n\t},\n\n\tget magFilter() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\n\t\treturn this.texture.magFilter;\n\n\t},\n\n\tset magFilter( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\n\t\tthis.texture.magFilter = value;\n\n\t},\n\n\tget minFilter() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\n\t\treturn this.texture.minFilter;\n\n\t},\n\n\tset minFilter( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\n\t\tthis.texture.minFilter = value;\n\n\t},\n\n\tget anisotropy() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\n\t\treturn this.texture.anisotropy;\n\n\t},\n\n\tset anisotropy( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\n\t\tthis.texture.anisotropy = value;\n\n\t},\n\n\tget offset() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\n\t\treturn this.texture.offset;\n\n\t},\n\n\tset offset( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\n\t\tthis.texture.offset = value;\n\n\t},\n\n\tget repeat() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\n\t\treturn this.texture.repeat;\n\n\t},\n\n\tset repeat( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\n\t\tthis.texture.repeat = value;\n\n\t},\n\n\tget format() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\n\t\treturn this.texture.format;\n\n\t},\n\n\tset format( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\n\t\tthis.texture.format = value;\n\n\t},\n\n\tget type() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\n\t\treturn this.texture.type;\n\n\t},\n\n\tset type( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\n\t\tthis.texture.type = value;\n\n\t},\n\n\tget generateMipmaps() {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\n\t\treturn this.texture.generateMipmaps;\n\n\t},\n\n\tset generateMipmaps( value ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\n\t\tthis.texture.generateMipmaps = value;\n\n\t},\n\n\t//\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tthis.shareDepthFrom = source.shareDepthFrom;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawArrays( mode, start, count );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.data.count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, size;\n\n\tfunction setIndex( index ) {\n\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\tsize = 4;\n\n\t\t} else {\n\n\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\tsize = 2;\n\n\t\t}\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\n\t\textension.drawElementsInstancedANGLE( mode, index.array.length, type, 0, geometry.maxInstancedCount );\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLCapabilities.js\n\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tthis.getMaxPrecision = getMaxPrecision;\n\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp',\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tthis.vertexTextures = this.maxVertexTextures > 0;\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\tif ( _maxPrecision !== this.precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\tthis.precision = _maxPrecision;\n\n\t}\n\n\tif ( this.logarithmicDepthBuffer ) {\n\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLGeometries.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\tvar geometries = {};\n\n\tfunction get( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\treturn geometries[ geometry.id ];\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tvar buffergeometry;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tvar property = properties.get( geometry );\n\t\tif ( property.wireframe ) deleteAttribute( property.wireframe );\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction deleteAttribute( attribute ) {\n\n\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\tif ( buffer !== undefined ) {\n\n\t\t\tgl.deleteBuffer( buffer );\n\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction deleteAttributes( attributes ) {\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t}\n\n\t}\n\n\tfunction removeAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tproperties.delete( attribute.data );\n\n\t\t} else {\n\n\t\t\tproperties.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tthis.get = get;\n\n};\n\n// File:src/renderers/webgl/WebGLObjects.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t//\n\n\tfunction update( object ) {\n\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\tvar geometry = geometries.get( object );\n\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\tgeometry.updateFromObject( object );\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\tvar attributeProperties = properties.get( data );\n\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t}\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\treturn property.wireframe;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\t\tvar position = attributes.position;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar edges = {};\n\t\t\tvar array = index.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = attributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\tproperty.wireframe = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\tfunction checkEdge( edges, a, b ) {\n\n\t\tif ( a > b ) {\n\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\n\t\t}\n\n\t\tvar list = edges[ a ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\tedges[ a ] = [ b ];\n\t\t\treturn true;\n\n\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\tlist.push( b );\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tthis.getAttributeBuffer = getAttributeBuffer;\n\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\tthis.update = update;\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchUniformLocations( gl, program, identifiers ) {\n\n\t\tvar uniforms = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i );\n\t\t\tvar name = info.name;\n\t\t\tvar location = gl.getUniformLocation( program, name );\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE UNIFORM:\", name);\n\n\t\t\tvar suffixPos = name.lastIndexOf( '[0]' );\n\t\t\tif ( suffixPos !== - 1 && suffixPos === name.length - 3 ) {\n\n\t\t\t\tuniforms[ name.substr( 0, suffixPos ) ] = location;\n\n\t\t\t}\n\n\t\t\tuniforms[ name ] = location;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefixVertex = '';\n\t\t\tprefixFragment = '';\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\n\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\n\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\n\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\n\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\n\n\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tparameters.bumpMap || parameters.normalMap || parameters.flatShading || material.derivatives ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\n\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\n\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\n\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\n\n\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\n\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.metal ? '#define METAL' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = fetchUniformLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLPrograms.js\n\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"envMap\", \"envMapMode\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"maxDirLights\", \"maxPointLights\",\n\t\t\"maxSpotLights\", \"maxHemiLights\", \"maxShadows\", \"shadowMapEnabled\", \"pointLightShadows\",\n\t\t\"shadowMapType\", \"shadowMapDebug\", \"alphaTest\", \"metal\", \"doubleSided\",\n\t\t\"flipSided\"\n\t];\n\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction allocateLights( lights ) {\n\n\t\tvar dirLights = 0;\n\t\tvar pointLights = 0;\n\t\tvar spotLights = 0;\n\t\tvar hemiLights = 0;\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\n\t\t\tif ( light.visible === false ) continue;\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\n\n\t\t}\n\n\t\treturn { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };\n\n\t}\n\n\tfunction allocateShadows( lights ) {\n\n\t\tvar maxShadows = 0;\n\t\tvar pointLightShadows = 0;\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\n\t\t\tif ( ! light.castShadow ) continue;\n\n\t\t\tif ( light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) maxShadows ++;\n\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tmaxShadows ++;\n\t\t\t\tpointLightShadows ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { 'maxShadows': maxShadows, 'pointLightShadows': pointLightShadows };\n\n\t}\n\n\tthis.getParameters = function ( material, lights, fog, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxLightCount = allocateLights( lights );\n\t\tvar allocatedShadows = allocateShadows( lights );\n\t\tvar maxBones = allocateBones( object );\n\t\tvar precision = renderer.getPrecision();\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.initMaterial:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\n\t\t\tmap: !! material.map,\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tmaxDirLights: maxLightCount.directional,\n\t\t\tmaxPointLights: maxLightCount.point,\n\t\t\tmaxSpotLights: maxLightCount.spot,\n\t\t\tmaxHemiLights: maxLightCount.hemi,\n\n\t\t\tmaxShadows: allocatedShadows.maxShadows,\n\t\t\tpointLightShadows: allocatedShadows.pointLightShadows,\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && allocatedShadows.maxShadows > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\tshadowMapDebug: renderer.shadowMap.debug,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tmetal: material.metal,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar chunks = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tchunks.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tchunks.push( material.fragmentShader );\n\t\t\tchunks.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tchunks.push( name );\n\t\t\t\tchunks.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tvar parameterName = parameterNames[ i ];\n\t\t\tchunks.push( parameterName );\n\t\t\tchunks.push( parameters[ parameterName ] );\n\n\t\t}\n\n\t\treturn chunks.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n};\n\n// File:src/renderers/webgl/WebGLProperties.js\n\n/**\n* @author fordacious / fordacious.github.io\n*/\n\nTHREE.WebGLProperties = function () {\n\n\tvar properties = {};\n\n\tthis.get = function ( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t};\n\n\tthis.delete = function ( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tproperties = {};\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\treturn function WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\n\n\tvar _gl = _renderer.context,\n\t_state = _renderer.state,\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_min = new THREE.Vector3(),\n\t_max = new THREE.Vector3(),\n\n\t_lookTarget = new THREE.Vector3(),\n\t_lightPositionWorld = new THREE.Vector3(),\n\n\t_renderList = [],\n\n\t_MorphingFlag = 1,\n\t_SkinningFlag = 2,\n\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants );\n\n\tvar cubeDirections = [\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t];\n\n\tvar _vector4 = new THREE.Vector4();\n\n\t// init\n\n\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\n\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\n\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: depthUniforms,\n\t\t\tvertexShader: depthShader.vertexShader,\n\t\t\tfragmentShader: depthShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\t\t} );\n\n\t\tdepthMaterial._shadowPass = true;\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: distanceUniforms,\n\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\t\t} );\n\n\t\tdistanceMaterial._shadowPass = true;\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = THREE.PCFShadowMap;\n\tthis.cullFace = THREE.CullFaceFront;\n\n\tthis.render = function ( scene ) {\n\n\t\tvar faceCount, isPointLight;\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t// Set GL state for depth map.\n\t\t_gl.clearColor( 1, 1, 1, 1 );\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.enable( _gl.CULL_FACE );\n\t\t_gl.frontFace( _gl.CCW );\n\t\t_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );\n\t\t_state.setDepthTest( true );\n\n\t\t// save the existing viewport so it can be restored later\n\t\t_renderer.getViewport( _vector4 );\n\n\t\t// render depth map\n\n\t\tfor ( var i = 0, il = _lights.length; i < il; i ++ ) {\n\n\t\t\tvar light = _lights[ i ];\n\n\t\t\tif ( light.castShadow === true ) {\n\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar shadowCamera = shadow.camera;\n\t\t\t\tvar shadowMapSize = shadow.mapSize;\n\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\t\t\t\t\tisPointLight = true;\n\n\t\t\t\t\tvar vpWidth = shadowMapSize.x / 4.0;\n\t\t\t\t\tvar vpHeight = shadowMapSize.y / 2.0;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\t\t\t\t\tisPointLight = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar shadowFilter = THREE.LinearFilter;\n\n\t\t\t\t\tif ( scope.type === THREE.PCFSoftShadowMap ) {\n\n\t\t\t\t\t\tshadowFilter = THREE.NearestFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\n\n\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );\n\t\t\t\t\tshadow.matrix = new THREE.Matrix4();\n\n\t\t\t\t\t//\n\n\t\t\t\t\tif ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\t\t\tshadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_renderer.setViewport( vpDimensions.x, vpDimensions.y, vpDimensions.z, vpDimensions.w );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\t_renderList.length = 0;\n\n\t\t\t\t\tprojectObject( scene, shadowCamera );\n\n\t\t\t\t\t// render shadow map\n\t\t\t\t\t// render regular objects\n\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// We must call _renderer.resetGLState() at the end of each iteration of\n\t\t\t\t// the light loop in order to force material updates for each light.\n\t\t\t\t_renderer.resetGLState();\n\n\t\t\t}\n\n\t\t}\n\n\t\t_renderer.setViewport( _vector4.x, _vector4.y, _vector4.z, _vector4.w );\n\n\t\t// Restore GL state.\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\t_state.enable( _gl.BLEND );\n\n\t\tif ( scope.cullFace === THREE.CullFaceFront ) {\n\n\t\t\t_gl.cullFace( _gl.BACK );\n\n\t\t}\n\n\t\t_renderer.resetGLState();\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar newMaterial = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\n\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tnewMaterial = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tnewMaterial = customMaterial;\n\n\t\t}\n\n\t\tnewMaterial.visible = material.visible;\n\t\tnewMaterial.wireframe = material.wireframe;\n\t\tnewMaterial.wireframeLinewidth = material.wireframeLinewidth;\n\n\t\tif ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {\n\n\t\t\tnewMaterial.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t}\n\n\t\treturn newMaterial;\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLState.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\tvar _this = this;\n\n\tvar newAttributes = new Uint8Array( 16 );\n\tvar enabledAttributes = new Uint8Array( 16 );\n\tvar attributeDivisors = new Uint8Array( 16 );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\n\tvar currentDepthFunc = null;\n\tvar currentDepthWrite = null;\n\n\tvar currentColorWrite = null;\n\n\tvar currentFlipSided = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\tvar currentTextureSlot = undefined;\n\tvar currentBoundTextures = {};\n\n\tthis.init = function () {\n\n\t\tgl.clearColor( 0, 0, 0, 1 );\n\t\tgl.clearDepth( 1 );\n\t\tgl.clearStencil( 0 );\n\n\t\tthis.enable( gl.DEPTH_TEST );\n\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\tgl.frontFace( gl.CCW );\n\t\tgl.cullFace( gl.BACK );\n\t\tthis.enable( gl.CULL_FACE );\n\n\t\tthis.enable( gl.BLEND );\n\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\n\n\t};\n\n\tthis.initAttributes = function () {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttribute = function ( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t};\n\n\tthis.disableUnusedAttributes = function () {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.enable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t};\n\n\tthis.disable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t};\n\n\tthis.getCompressedTextureFormats = function () {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t};\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {\n\n\t\tif ( blending !== currentBlending ) {\n\n\t\t\tif ( blending === THREE.NoBlending ) {\n\n\t\t\t\tthis.disable( gl.BLEND );\n\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\tthis.enable( gl.BLEND );\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\n\n\t\t\t\tthis.enable( gl.BLEND );\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\n\n\t\t\t\tthis.enable( gl.BLEND );\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\n\n\t\t\t\tthis.enable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tthis.enable( gl.BLEND );\n\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t}\n\n\t};\n\n\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\tif ( depthFunc ) {\n\n\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t}\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tif ( depthTest ) {\n\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tif ( currentDepthWrite !== depthWrite ) {\n\n\t\t\tgl.depthMask( depthWrite );\n\t\t\tcurrentDepthWrite = depthWrite;\n\n\t\t}\n\n\t};\n\n\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\tif ( currentColorWrite !== colorWrite ) {\n\n\t\t\tgl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );\n\t\t\tcurrentColorWrite = colorWrite;\n\n\t\t}\n\n\t};\n\n\tthis.setFlipSided = function ( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setLineWidth = function ( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t};\n\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t\tif ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {\n\n\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t}\n\n\t};\n\n\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t};\n\n\t// texture\n\n\tthis.activeTexture = function ( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === undefined ) {\n\n\t\t\t_this.activeTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t};\n\n\tthis.compressedTexImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\tthis.texImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tthis.reset = function () {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentDepthWrite = null;\n\t\tcurrentColorWrite = null;\n\n\t\tcurrentFlipSided = null;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\tvar hasVertexTexture;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1,  0, 0,\n\t\t\t 1, - 1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t- 1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\n\n\t\tvar shader;\n\n\t\tif ( hasVertexTexture ) {\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"precision mediump float;\",\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t}\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewportHeight / viewportWidth,\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\n\n\t\tvar size = 16 / viewportHeight,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tgl.depthMask( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewportHeight;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\n\n\t\t\t// screen cull\n\n\t\t\tif ( hasVertexTexture || (\n\t\t\t\tscreenPositionPixels.x > 0 &&\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\n\t\t\t\tscreenPositionPixels.y > 0 &&\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tgl.depthMask( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new THREE.Vector3();\n\tvar spriteRotation = new THREE.Quaternion();\n\tvar spriteScale = new THREE.Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\n\n\t\t\t\trenderer.setTexture( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/CurveUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.CurveUtils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/extras/GeometryUtils.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\n// File:src/extras/ImageUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Daosheng Mu / https://github.com/DaoshengMu/\n */\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new THREE.TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new THREE.CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/ShapeUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\ttriangulate: ( function () {\n\n\t\t/**\n\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t * See original code and more information here:\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t *\n\t\t * ported to actionscript by Zevan Rosser\n\t\t * www.actionsnippet.com\n\t\t *\n\t\t * ported to javascript by Joshua Koo\n\t\t * http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t */\n\n\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\tvar p;\n\t\t\tvar ax, ay, bx, by;\n\t\t\tvar cx, cy, px, py;\n\n\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// takes in an contour array and returns\n\n\t\treturn function ( contour, indices ) {\n\n\t\t\tvar n = contour.length;\n\n\t\t\tif ( n < 3 ) return null;\n\n\t\t\tvar result = [],\n\t\t\t\tverts = [],\n\t\t\t\tvertIndices = [];\n\n\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\tvar u, v, w;\n\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t}\n\n\t\t\tvar nv = n;\n\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t//return null;\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnv --;\n\n\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices ) return vertIndices;\n\t\t\treturn result;\n\n\t\t}\n\n\t} )(),\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t// The order of legs is important\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2: ( function () {\n\n\t\tfunction b2p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * p;\n\n\t\t}\n\n\t\tfunction b2p1( t, p ) {\n\n\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t}\n\n\t\tfunction b2p2( t, p ) {\n\n\t\t\treturn t * t * p;\n\n\t\t}\n\n\t\treturn function ( t, p0, p1, p2 ) {\n\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t};\n\n\t} )(),\n\n\t// Cubic Bezier Functions\n\n\tb3: ( function () {\n\n\t\tfunction b3p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * k * p;\n\n\t\t}\n\n\t\tfunction b3p1( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * k * t * p;\n\n\t\t}\n\n\t\tfunction b3p2( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * t * t * p;\n\n\t\t}\n\n\t\tfunction b3p3( t, p ) {\n\n\t\t\treturn t * t * t * p;\n\n\t\t}\n\n\t\treturn function ( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t};\n\n\t} )()\n\n};\n\n// File:src/extras/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\tthis.source.onended = this.onEnded.bind( this );\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n\tthis.autoplay = false;\n\n\tthis.startTime = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\n};\n\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Audio.prototype.constructor = THREE.Audio;\n\nTHREE.Audio.prototype.load = function ( file ) {\n\n\tvar scope = this;\n\n\tvar request = new XMLHttpRequest();\n\trequest.open( 'GET', file, true );\n\trequest.responseType = 'arraybuffer';\n\trequest.onload = function ( e ) {\n\n\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\n\t\t\tscope.source.buffer = buffer;\n\n\t\t\tif ( scope.autoplay ) scope.play();\n\n\t\t} );\n\n\t};\n\trequest.send();\n\n\treturn this;\n\n};\n\nTHREE.Audio.prototype.play = function () {\n\n\tif ( this.isPlaying === true ) {\n\n\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\treturn;\n\n\t}\n\n\tvar source = this.context.createBufferSource();\n\n\tsource.buffer = this.source.buffer;\n\tsource.loop = this.source.loop;\n\tsource.onended = this.source.onended;\n\tsource.start( 0, this.startTime );\n\tsource.playbackRate.value = this.playbackRate;\n\n\tthis.isPlaying = true;\n\n\tthis.source = source;\n\n\tthis.connect();\n\n};\n\nTHREE.Audio.prototype.pause = function () {\n\n\tthis.source.stop();\n\tthis.startTime = this.context.currentTime;\n\n};\n\nTHREE.Audio.prototype.stop = function () {\n\n\tthis.source.stop();\n\tthis.startTime = 0;\n\n};\n\nTHREE.Audio.prototype.connect = function () {\n\n\tif ( this.filter !== undefined ) {\n\n\t\tthis.source.connect( this.filter );\n\t\tthis.filter.connect( this.panner );\n\n\t} else {\n\n\t\tthis.source.connect( this.panner );\n\n\t}\n\n};\n\nTHREE.Audio.prototype.disconnect = function () {\n\n\tif ( this.filter !== undefined ) {\n\n\t\tthis.source.disconnect( this.filter );\n\t\tthis.filter.disconnect( this.panner );\n\n\t} else {\n\n\t\tthis.source.disconnect( this.panner );\n\n\t}\n\n};\n\nTHREE.Audio.prototype.setFilter = function ( value ) {\n\n\tif ( this.isPlaying === true ) {\n\n\t\tthis.disconnect();\n\t\tthis.filter = value;\n\t\tthis.connect();\n\n\t} else {\n\n\t\tthis.filter = value;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.getFilter = function () {\n\n\treturn this.filter;\n\n};\n\nTHREE.Audio.prototype.setPlaybackRate = function ( value ) {\n\n\tthis.playbackRate = value;\n\n\tif ( this.isPlaying === true ) {\n\n\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t}\n\n};\n\nTHREE.Audio.prototype.getPlaybackRate = function () {\n\n\treturn this.playbackRate;\n\n};\n\nTHREE.Audio.prototype.onEnded = function() {\n\n\tthis.isPlaying = false;\n\n};\n\nTHREE.Audio.prototype.setLoop = function ( value ) {\n\n\tthis.source.loop = value;\n\n};\n\nTHREE.Audio.prototype.getLoop = function () {\n\n\treturn this.source.loop;\n\n};\n\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\n\tthis.panner.refDistance = value;\n\n};\n\nTHREE.Audio.prototype.getRefDistance = function () {\n\n\treturn this.panner.refDistance;\n\n};\n\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\n\tthis.panner.rolloffFactor = value;\n\n};\n\nTHREE.Audio.prototype.getRolloffFactor = function () {\n\n\treturn this.panner.rolloffFactor;\n\n};\n\nTHREE.Audio.prototype.setVolume = function ( value ) {\n\n\tthis.gain.gain.value = value;\n\n};\n\nTHREE.Audio.prototype.getVolume = function () {\n\n\treturn this.gain.gain.value;\n\n};\n\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\n\treturn function updateMatrixWorld( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t};\n\n} )();\n\n// File:src/extras/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\n\n};\n\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.AudioListener.prototype.constructor = THREE.AudioListener;\n\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar orientation = new THREE.Vector3();\n\n\treturn function updateMatrixWorld( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener = this.context.listener;\n\t\tvar up = this.up;\n\n\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t};\n\n} )();\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n * THREE.ClosedSplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\nTHREE.Curve.prototype = {\n\n\tconstructor: THREE.Curve,\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( t ) {\n\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\tif ( this.cacheArcLengths\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t//var time = Date.now();\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\tvar t = i / ( il - 1 );\n\t\t\treturn t;\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t}\n\n}\n\nTHREE.Curve.Utils = THREE.CurveUtils; // backwards compatibility\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\n\tthis.autoClose = false; // Automatically closes the path\n\n};\n\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CurvePath.prototype.constructor = THREE.CurvePath;\n\nTHREE.CurvePath.prototype.add = function ( curve ) {\n\n\tthis.curves.push( curve );\n\n};\n\n/*\nTHREE.CurvePath.prototype.checkConnection = function() {\n\t// TODO\n\t// If the ending of curve is not connected to the starting\n\t// or the next curve, then, this is not a real path\n};\n*/\n\nTHREE.CurvePath.prototype.closePath = function() {\n\n\t// TODO Test\n\t// and verify for vector3 (needs to implement equals)\n\t// Add a line curve if start and end of lines are not connected\n\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t}\n\n};\n\n// To get accurate point with reference to\n// entire path distance at time t,\n// following has to be done:\n\n// 1. Length of each sub path have to be known\n// 2. Locate and identify type of curve\n// 3. Get t for the curve\n// 4. Return curve.getPointAt(t')\n\nTHREE.CurvePath.prototype.getPoint = function( t ) {\n\n\tvar d = t * this.getLength();\n\tvar curveLengths = this.getCurveLengths();\n\tvar i = 0;\n\n\t// To think about boundaries points.\n\n\twhile ( i < curveLengths.length ) {\n\n\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\tvar curve = this.curves[ i ];\n\n\t\t\tvar u = 1 - diff / curve.getLength();\n\n\t\t\treturn curve.getPointAt( u );\n\n\t\t}\n\n\t\ti ++;\n\n\t}\n\n\treturn null;\n\n\t// loop where sum != 0, sum > d , sum+1 <d\n\n};\n\n/*\nTHREE.CurvePath.prototype.getTangent = function( t ) {\n};\n*/\n\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n// getPoint() depends on getLength\n\nTHREE.CurvePath.prototype.getLength = function() {\n\n\tvar lens = this.getCurveLengths();\n\treturn lens[ lens.length - 1 ];\n\n};\n\n// Compute lengths and cache them\n// We cannot overwrite getLengths() because UtoT mapping uses it.\n\nTHREE.CurvePath.prototype.getCurveLengths = function() {\n\n\t// We use cache values if curves and cache array are same length\n\n\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\treturn this.cacheLengths;\n\n\t}\n\n\t// Get length of sub-curve\n\t// Push sums into cached array\n\n\tvar lengths = [], sums = 0;\n\n\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\tsums += this.curves[ i ].getLength();\n\t\tlengths.push( sums );\n\n\t}\n\n\tthis.cacheLengths = lengths;\n\n\treturn lengths;\n\n};\n\n\n\n/**************************************************************\n *\tCreate Geometries Helpers\n **************************************************************/\n\n/// Generate geometry from path points (for Line or Points objects)\n\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\n\n\tvar pts = this.getPoints( divisions, true );\n\treturn this.createGeometry( pts );\n\n};\n\n// Generate geometry from equidistant sampling along the path\n\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\n\n\tvar pts = this.getSpacedPoints( divisions, true );\n\treturn this.createGeometry( pts );\n\n};\n\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\tvar point = points[ i ];\n\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t}\n\n\treturn geometry;\n\n};\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call( this );\n\n\tthis.actions = [];\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\nTHREE.Path.prototype.constructor = THREE.Path;\n\n// TODO Clean up PATH API\n\n// Create path using straight lines to connect all points\n// - vectors: array of Vector2\n\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\n\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t}\n\n};\n\n// startPath() endPath()?\n\nTHREE.Path.prototype.moveTo = function ( x, y ) {\n\n\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\n\n};\n\nTHREE.Path.prototype.lineTo = function ( x, y ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\n\n};\n\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.QuadraticBezierCurve(\n\t\tnew THREE.Vector2( x0, y0 ),\n\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\tnew THREE.Vector2( aX, aY )\n\t);\n\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\n\n};\n\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.CubicBezierCurve(\n\t\tnew THREE.Vector2( x0, y0 ),\n\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\tnew THREE.Vector2( aX, aY )\n\t);\n\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\n\n};\n\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\n\tArray.prototype.push.apply( npts, pts );\n\n\tvar curve = new THREE.SplineCurve( npts );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: 'splineThru', args: args } );\n\n};\n\n// FUTURE: Change the API or follow canvas API?\n\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\taStartAngle, aEndAngle, aClockwise );\n\n };\n\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n };\n\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n };\n\n\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tvar args = [\n\t\taX, aY,\n\t\txRadius, yRadius,\n\t\taStartAngle, aEndAngle,\n\t\taClockwise,\n\t\taRotation || 0 // aRotation is optional.\n\t];\n\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\tthis.curves.push( curve );\n\n\tvar lastPoint = curve.getPoint( 1 );\n\targs.push( lastPoint.x );\n\targs.push( lastPoint.y );\n\n\tthis.actions.push( { action: 'ellipse', args: args } );\n\n };\n\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\n\n\tif ( ! divisions ) divisions = 40;\n\n\tvar points = [];\n\n\tfor ( var i = 0; i < divisions; i ++ ) {\n\n\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n\t}\n\n\t// if ( closedPath ) {\n\t//\n\t// \tpoints.push( points[ 0 ] );\n\t//\n\t// }\n\n\treturn points;\n\n};\n\n/* Return an array of vectors based on contour of the path */\n\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\n\n\tdivisions = divisions || 12;\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\tvar points = [];\n\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n\t\tlaste, tx, ty;\n\n\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\n\n\t\tvar item = this.actions[ i ];\n\n\t\tvar action = item.action;\n\t\tvar args = item.args;\n\n\t\tswitch ( action ) {\n\n\t\tcase 'moveTo':\n\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\tbreak;\n\n\t\tcase 'lineTo':\n\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\tbreak;\n\n\t\tcase 'quadraticCurveTo':\n\n\t\t\tcpx  = args[ 2 ];\n\t\t\tcpy  = args[ 3 ];\n\n\t\t\tcpx1 = args[ 0 ];\n\t\t\tcpy1 = args[ 1 ];\n\n\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\tcpx0 = laste.x;\n\t\t\t\tcpy0 = laste.y;\n\n\t\t\t} else {\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\tvar t = j / divisions;\n\n\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\n\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'bezierCurveTo':\n\n\t\t\tcpx  = args[ 4 ];\n\t\t\tcpy  = args[ 5 ];\n\n\t\t\tcpx1 = args[ 0 ];\n\t\t\tcpy1 = args[ 1 ];\n\n\t\t\tcpx2 = args[ 2 ];\n\t\t\tcpy2 = args[ 3 ];\n\n\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\tcpx0 = laste.x;\n\t\t\t\tcpy0 = laste.y;\n\n\t\t\t} else {\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t}\n\n\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\tvar t = j / divisions;\n\n\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'splineThru':\n\n\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n\t\t\tvar spts = [ last ];\n\n\t\t\tvar n = divisions * args[ 0 ].length;\n\n\t\t\tspts = spts.concat( args[ 0 ] );\n\n\t\t\tvar spline = new THREE.SplineCurve( spts );\n\n\t\t\tfor ( var j = 1; j <= n; j ++ ) {\n\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'arc':\n\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\taRadius = args[ 2 ],\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n\t\t\t\taClockwise = !! args[ 5 ];\n\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\tvar angle;\n\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t}\n\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\n\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\t//console.log(points);\n\n\t\t\tbreak;\n\n\t\tcase 'ellipse':\n\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\txRadius = args[ 2 ],\n\t\t\t\tyRadius = args[ 3 ],\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n\t\t\t\taClockwise = !! args[ 6 ],\n\t\t\t\taRotation = args[ 7 ];\n\n\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\tvar angle;\n\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\tvar cos, sin;\n\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( aRotation );\n\t\t\t\tsin = Math.sin( aRotation );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t}\n\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\n\n\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\tvar x = tx, y = ty;\n\n\t\t\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\n\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\n\n\t\t\t\t}\n\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\t//console.log(points);\n\n\t\t\tbreak;\n\n\t\t} // end switch\n\n\t}\n\n\n\n\t// Normalize to remove the closing point by default.\n\tvar lastPoint = points[ points.length - 1 ];\n\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\n\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\n\t\tpoints.splice( points.length - 1, 1 );\n\tif ( closedPath ) {\n\n\t\tpoints.push( points[ 0 ] );\n\n\t}\n\n\treturn points;\n\n};\n\n//\n// Breaks path into shapes\n//\n//\tAssumptions (if parameter isCCW==true the opposite holds):\n//\t- solid shapes are defined clockwise (CW)\n//\t- holes are defined counterclockwise (CCW)\n//\n//\tIf parameter noHoles==true:\n//  - all subPaths are regarded as solid shapes\n//  - definition order CW/CCW has no relevance\n//\n\nTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\n\n\tfunction extractSubpaths( inActions ) {\n\n\t\tvar subPaths = [], lastPath = new THREE.Path();\n\n\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\n\n\t\t\tvar item = inActions[ i ];\n\n\t\t\tvar args = item.args;\n\t\t\tvar action = item.action;\n\n\t\t\tif ( action === 'moveTo' ) {\n\n\t\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\t\tsubPaths.push( lastPath );\n\t\t\t\t\tlastPath = new THREE.Path();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlastPath[ action ].apply( lastPath, args );\n\n\t\t}\n\n\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\tsubPaths.push( lastPath );\n\n\t\t}\n\n\t\t// console.log(subPaths);\n\n\t\treturn\tsubPaths;\n\n\t}\n\n\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\tvar shapes = [];\n\n\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\tshapes.push( tmpShape );\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\tvar polyLen = inPolygon.length;\n\n\t\t// inPt on polygon contour => immediate success    or\n\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t//  with the horizontal line through inPt, left of inPt\n\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\tvar inside = false;\n\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t}\n\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t// continue;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tinside;\n\n\t}\n\n\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\tvar subPaths = extractSubpaths( this.actions );\n\tif ( subPaths.length === 0 ) return [];\n\n\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\tif ( subPaths.length === 1 ) {\n\n\t\ttmpPath = subPaths[ 0 ];\n\t\ttmpShape = new THREE.Shape();\n\t\ttmpShape.actions = tmpPath.actions;\n\t\ttmpShape.curves = tmpPath.curves;\n\t\tshapes.push( tmpShape );\n\t\treturn shapes;\n\n\t}\n\n\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t// console.log(\"Holes first\", holesFirst);\n\n\tvar betterShapeHoles = [];\n\tvar newShapes = [];\n\tvar newShapeHoles = [];\n\tvar mainIdx = 0;\n\tvar tmpPoints;\n\n\tnewShapes[ mainIdx ] = undefined;\n\tnewShapeHoles[ mainIdx ] = [];\n\n\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\ttmpPath = subPaths[ i ];\n\t\ttmpPoints = tmpPath.getPoints();\n\t\tsolid = isClockWise( tmpPoints );\n\t\tsolid = isCCW ? ! solid : solid;\n\n\t\tif ( solid ) {\n\n\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\n\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t//console.log('cw', i);\n\n\t\t} else {\n\n\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t//console.log('ccw', i);\n\n\t\t}\n\n\t}\n\n\t// only Holes? -> probably all Shapes with wrong orientation\n\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\tif ( newShapes.length > 1 ) {\n\n\t\tvar ambiguous = false;\n\t\tvar toChange = [];\n\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t}\n\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\tif ( toChange.length > 0 ) {\n\n\t\t\t// console.log(\"to change: \", toChange);\n\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t}\n\n\t}\n\n\tvar tmpHoles;\n\n\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\ttmpShape = newShapes[ i ].s;\n\t\tshapes.push( tmpShape );\n\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t}\n\n\t}\n\n\t//console.log(\"shape\", shapes);\n\n\treturn shapes;\n\n};\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\nTHREE.Shape.prototype.constructor = THREE.Shape;\n\n// Convenience method to return ExtrudeGeometry\n\nTHREE.Shape.prototype.extrude = function ( options ) {\n\n\treturn new THREE.ExtrudeGeometry( this, options );\n\n};\n\n// Convenience method to return ShapeGeometry\n\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\n\n\treturn new THREE.ShapeGeometry( this, options );\n\n};\n\n// Get points of holes\n\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\n\n\tvar holesPts = [];\n\n\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t}\n\n\treturn holesPts;\n\n};\n\n\n// Get points of shape and holes (keypoints based on segments parameter)\n\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\n\n\treturn {\n\n\t\tshape: this.getPoints( divisions ),\n\t\tholes: this.getPointsHoles( divisions )\n\n\t};\n\n};\n\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\n\n\treturn this.extractAllPoints( divisions );\n\n};\n\nTHREE.Shape.Utils = THREE.ShapeUtils; // backwards compatibility\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tvar point = this.v2.clone().sub( this.v1 );\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\n\treturn new THREE.Vector2(\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t);\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\treturn new THREE.Vector2(\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\treturn new THREE.Vector2( \n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t);\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\treturn new THREE.Vector2( \n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar point1 = points[ intPoint ];\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\treturn new THREE.Vector2(\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t);\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\t\n\tthis.aRotation = aRotation || 0;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n\tvar angle;\n\n\tif ( this.aClockwise === true ) {\n\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n\t} else {\n\n\t\tangle = this.aStartAngle + t * deltaAngle;\n\n\t}\n\t\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x, ty = y;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\n\n\t}\n\n\treturn new THREE.Vector2( x, y );\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\treturn new THREE.Vector3(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector3(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CatmullRomCurve3.js\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\nTHREE.CatmullRomCurve3 = ( function() {\n\n\tvar\n\t\ttmp = new THREE.Vector3(),\n\t\tpx = new CubicPoly(),\n\t\tpy = new CubicPoly(),\n\t\tpz = new CubicPoly();\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t}\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\tthis.c0 = x0;\n\t\tthis.c1 = t0;\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t};\n\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t// compute tangents when parameterized in [t1,t2]\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t// rescale tangents for parametrization in [0,1]\n\t\tt1 *= dt1;\n\t\tt2 *= dt1;\n\n\t\t// initCubicPoly\n\t\tthis.init( x1, x2, t1, t2 );\n\n\t};\n\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t};\n\n\tCubicPoly.prototype.calc = function( t ) {\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t};\n\n\t// Subclass Three.js curve\n\treturn THREE.Curve.create(\n\n\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\tthis.points = p || [];\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points,\n\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\tl = points.length;\n\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\tpoint = ( l - 1 ) * t;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tif ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\n\t\t\t}\n\n\t\t\tvar p0, p1, p2, p3;\n\n\t\t\tif ( intPoint === 0 ) {\n\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\tp0 = tmp;\n\n\t\t\t} else {\n\n\t\t\t\tp0 = points[ intPoint - 1 ];\n\n\t\t\t}\n\n\t\t\tp1 = points[ intPoint ];\n\t\t\tp2 = points[ intPoint + 1 ];\n\n\t\t\tif ( intPoint + 2 < l ) {\n\n\t\t\t\tp3 = points[ intPoint + 2 ]\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 2 ] );\n\t\t\t\tp3 = tmp;\n\n\t\t\t}\n\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t// safety check for repeated points\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3(\n\t\t\t\tpx.calc( weight ),\n\t\t\t\tpy.calc( weight ),\n\t\t\t\tpz.calc( weight )\n\t\t\t);\n\n\t\t\treturn v;\n\n\t\t}\n\n\t);\n\n} )();\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 0 ) * t; // This needs to be from 0-length +1\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\tvar point0 = points[ ( intPoint - 1 ) % points.length ];\n\t\tvar point1 = points[ ( intPoint     ) % points.length ];\n\t\tvar point2 = points[ ( intPoint + 1 ) % points.length ];\n\t\tvar point3 = points[ ( intPoint + 2 ) % points.length ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.widthSegments = widthSegments || 1;\n\tthis.heightSegments = heightSegments || 1;\n\tthis.depthSegments = depthSegments || 1;\n\n\tvar scope = this;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\tvar depth_half = depth / 2;\n\n\tbuildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px\n\tbuildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx\n\tbuildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py\n\tbuildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny\n\tbuildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz\n\tbuildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz\n\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\n\n\t\tvar w, ix, iy,\n\t\tgridX = scope.widthSegments,\n\t\tgridY = scope.heightSegments,\n\t\twidth_half = width / 2,\n\t\theight_half = height / 2,\n\t\toffset = scope.vertices.length;\n\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\n\n\t\t\tw = 'z';\n\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\n\n\t\t\tw = 'y';\n\t\t\tgridY = scope.depthSegments;\n\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\n\n\t\t\tw = 'x';\n\t\t\tgridX = scope.depthSegments;\n\n\t\t}\n\n\t\tvar gridX1 = gridX + 1,\n\t\tgridY1 = gridY + 1,\n\t\tsegment_width = width / gridX,\n\t\tsegment_height = height / gridY,\n\t\tnormal = new THREE.Vector3();\n\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar vector = new THREE.Vector3();\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\n\t\t\t\tvector[ w ] = depth;\n\n\t\t\t\tscope.vertices.push( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tvar uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );\n\t\t\t\tvar uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );\n\t\t\t\tvar uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );\n\t\t\t\tvar uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );\n\n\t\t\t\tvar face = new THREE.Face3( a + offset, b + offset, d + offset );\n\t\t\t\tface.normal.copy( normal );\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\tscope.faces.push( face );\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\t\tface = new THREE.Face3( b + offset, c + offset, d + offset );\n\t\t\t\tface.normal.copy( normal );\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\tscope.faces.push( face );\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\nTHREE.BoxGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.BoxGeometry(\n\t\tparameters.width,\n\t\tparameters.height,\n\t\tparameters.depth,\n\t\tparameters.widthSegments,\n\t\tparameters.heightSegments,\n\t\tparameters.depthSegments\n\t);\n\n};\n\nTHREE.CubeGeometry = THREE.BoxGeometry; // backwards compatibility\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\nTHREE.CircleGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.CircleGeometry(\n\t\tparameters.radius,\n\t\tparameters.segments,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar vertices = segments + 2;\n\n\tvar positions = new Float32Array( vertices * 3 );\n\tvar normals = new Float32Array( vertices * 3 );\n\tvar uvs = new Float32Array( vertices * 2 );\n\n\t// center data is already zero, but need to set a few extras\n\tnormals[ 2 ] = 1.0;\n\tuvs[ 0 ] = 0.5;\n\tuvs[ 1 ] = 0.5;\n\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\nTHREE.CircleBufferGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.CircleBufferGeometry(\n\t\tparameters.radius,\n\t\tparameters.segments,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = radialSegments || 8;\n\theightSegments = heightSegments || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;\n\n\tvar heightHalf = height / 2;\n\n\tvar x, y, vertices = [], uvs = [];\n\n\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\t\tvar uvsRow = [];\n\n\t\tvar v = y / heightSegments;\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\tvertex.y = - v * height + heightHalf;\n\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t\tverticesRow.push( this.vertices.length - 1 );\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\t\tuvs.push( uvsRow );\n\n\t}\n\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\tvar na, nb;\n\n\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\tif ( radiusTop !== 0 ) {\n\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\n\n\t\t} else {\n\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\n\n\t\t}\n\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\n\n\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x ];\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\n\n\t\t\tvar n1 = na.clone();\n\t\t\tvar n2 = na.clone();\n\t\t\tvar n3 = nb.clone();\n\t\t\tvar n4 = nb.clone();\n\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// top cap\n\n\tif ( openEnded === false && radiusTop > 0 ) {\n\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ 0 ][ x ];\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\n\t\t\tvar v3 = this.vertices.length - 1;\n\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\n\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 0 );\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n\t\t}\n\n\t}\n\n\t// bottom cap\n\n\tif ( openEnded === false && radiusBottom > 0 ) {\n\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ heightSegments ][ x + 1 ];\n\t\t\tvar v2 = vertices[ heightSegments ][ x ];\n\t\t\tvar v3 = this.vertices.length - 1;\n\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\n\n\t\t\tvar uv1 = uvs[ heightSegments ][ x + 1 ].clone();\n\t\t\tvar uv2 = uvs[ heightSegments ][ x ].clone();\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 1 );\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\nTHREE.CylinderGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.CylinderGeometry(\n\t\tparameters.radiusTop,\n\t\tparameters.radiusBottom,\n\t\tparameters.height,\n\t\tparameters.radialSegments,\n\t\tparameters.heightSegments,\n\t\tparameters.openEnded,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/EdgesGeometry.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\tvar thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tvar geometry2;\n\n\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tgeometry2 = new THREE.Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = [];\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n};\n\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\tshapes = [];\n\t\treturn;\n\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t//bs = bevelSize * t; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n */\n\n// points - to create a closed torus, one must use a set of points \n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2*PI) range of the lathed section\n//    2*pi is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = segments || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || 2 * Math.PI;\n\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar c = Math.cos( phi ),\n\t\t\ts = Math.sin( phi );\n\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\n\n\t\t\tvar pt = points[ j ];\n\n\t\t\tvar vertex = new THREE.Vector3();\n\n\t\t\tvertex.x = c * pt.x - s * pt.y;\n\t\t\tvertex.y = s * pt.x + c * pt.y;\n\t\t\tvertex.z = pt.z;\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t}\n\n\t}\n\n\tvar np = points.length;\n\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\n\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\n\n\t\t\tvar base = j + np * i;\n\t\t\tvar a = base;\n\t\t\tvar b = base + np;\n\t\t\tvar c = base + 1 + np;\n\t\t\tvar d = base + 1;\n\n\t\t\tvar u0 = i * inverseSegments;\n\t\t\tvar v0 = j * inversePointLength;\n\t\t\tvar u1 = u0 + inverseSegments;\n\t\t\tvar v1 = v0 + inversePointLength;\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\n\n\t\t\t\tnew THREE.Vector2( u0, v0 ),\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\n\t\t\t\tnew THREE.Vector2( u0, v1 )\n\n\t\t\t] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\n\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\n\t\t\t\tnew THREE.Vector2( u0, v1 )\n\n\t\t\t] );\n\n\n\t\t}\n\n\t}\n\n\tthis.mergeVertices();\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\nTHREE.PlaneGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.PlaneGeometry(\n\t\tparameters.width,\n\t\tparameters.height,\n\t\tparameters.widthSegments,\n\t\tparameters.heightSegments\n\t);\n\n};\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\nTHREE.PlaneBufferGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.PlaneBufferGeometry(\n\t\tparameters.width,\n\t\tparameters.height,\n\t\tparameters.widthSegments,\n\t\tparameters.heightSegments\n\t);\n\n};\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;\n\n\tvar i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\n\tfor ( i = 0; i < phiSegments + 1; i ++ ) {\n\n\t\t// concentric circles inside ring\n\n\t\tfor ( o = 0; o < thetaSegments + 1; o ++ ) {\n\n\t\t\t// number of segments per circle\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvar segment = thetaStart + o / thetaSegments * thetaLength;\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tthis.vertices.push( vertex );\n\t\t\tuvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );\n\n\t\t}\n\n\t\tradius += radiusStep;\n\n\t}\n\n\tvar n = new THREE.Vector3( 0, 0, 1 );\n\n\tfor ( i = 0; i < phiSegments; i ++ ) {\n\n\t\t// concentric circles inside ring\n\n\t\tvar thetaSegment = i * ( thetaSegments + 1 );\n\n\t\tfor ( o = 0; o < thetaSegments ; o ++ ) {\n\n\t\t\t// number of segments per circle\n\n\t\t\tvar segment = o + thetaSegment;\n\n\t\t\tvar v1 = segment;\n\t\t\tvar v2 = segment + thetaSegments + 1;\n\t\t\tvar v3 = segment + thetaSegments + 2;\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\n\n\t\t\tv1 = segment;\n\t\t\tv2 = segment + thetaSegments + 2;\n\t\t\tv3 = segment + 1;\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\nTHREE.RingGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.RingGeometry(\n\t\tparameters.innerRadius,\n\t\tparameters.outerRadius,\n\t\tparameters.thetaSegments,\n\t\tparameters.phiSegments,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\nTHREE.SphereGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.SphereGeometry(\n\t\tparameters.radius,\n\t\tparameters.widthSegments,\n\t\tparameters.heightSegments,\n\t\tparameters.phiStart,\n\t\tparameters.phiLength,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * based on THREE.SphereGeometry\n */\n\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = y / heightSegments;\n\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\tverticesRow.push( index );\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\tthis.addAttribute( 'position', positions );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\nTHREE.SphereBufferGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.SphereBufferGeometry(\n\t\tparameters.radius,\n\t\tparameters.widthSegments,\n\t\tparameters.heightSegments,\n\t\tparameters.phiStart,\n\t\tparameters.phiLength,\n\t\tparameters.thetaStart,\n\t\tparameters.thetaLength\n\t);\n\n};\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = radialSegments || 8;\n\ttubularSegments = tubularSegments || 6;\n\tarc = arc || Math.PI * 2;\n\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\n\n\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t\tuvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\n\n\t\t}\n\n\t}\n\n\tfor ( var j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( var i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\tvar face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );\n\t\t\tthis.faces.push( face );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\n\n\t\t\tface = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );\n\t\t\tthis.faces.push( face );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\nTHREE.TorusGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.TorusGeometry(\n\t\tparameters.radius,\n\t\tparameters.tube,\n\t\tparameters.radialSegments,\n\t\tparameters.tubularSegments,\n\t\tparameters.arc\n\t);\n\n};\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tp: p,\n\t\tq: q,\n\t\theightScale: heightScale\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = radialSegments || 64;\n\ttubularSegments = tubularSegments || 8;\n\tp = p || 2;\n\tq = q || 3;\n\theightScale = heightScale || 1;\n\n\tvar grid = new Array( radialSegments );\n\tvar tang = new THREE.Vector3();\n\tvar n = new THREE.Vector3();\n\tvar bitan = new THREE.Vector3();\n\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\n\n\t\tgrid[ i ] = new Array( tubularSegments );\n\t\tvar u = i / radialSegments * 2 * p * Math.PI;\n\t\tvar p1 = getPos( u, q, p, radius, heightScale );\n\t\tvar p2 = getPos( u + 0.01, q, p, radius, heightScale );\n\t\ttang.subVectors( p2, p1 );\n\t\tn.addVectors( p2, p1 );\n\n\t\tbitan.crossVectors( tang, n );\n\t\tn.crossVectors( bitan, tang );\n\t\tbitan.normalize();\n\t\tn.normalize();\n\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\n\n\t\t\tvar v = j / tubularSegments * 2 * Math.PI;\n\t\t\tvar cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\tvar pos = new THREE.Vector3();\n\t\t\tpos.x = p1.x + cx * n.x + cy * bitan.x;\n\t\t\tpos.y = p1.y + cx * n.y + cy * bitan.y;\n\t\t\tpos.z = p1.z + cx * n.z + cy * bitan.z;\n\n\t\t\tgrid[ i ][ j ] = this.vertices.push( pos ) - 1;\n\n\t\t}\n\n\t}\n\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\n\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\n\n\t\t\tvar ip = ( i + 1 ) % radialSegments;\n\t\t\tvar jp = ( j + 1 ) % tubularSegments;\n\n\t\t\tvar a = grid[ i ][ j ];\n\t\t\tvar b = grid[ ip ][ j ];\n\t\t\tvar c = grid[ ip ][ jp ];\n\t\t\tvar d = grid[ i ][ jp ];\n\n\t\t\tvar uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );\n\t\t\tvar uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n\tfunction getPos( u, in_q, in_p, radius, heightScale ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = in_q / in_p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\n\n\t\treturn new THREE.Vector3( tx, ty, tz );\n\n\t}\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\nTHREE.TorusKnotGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.TorusKnotGeometry(\n\t\tparameters.radius,\n\t\tparameters.tube,\n\t\tparameters.radialSegments,\n\t\tparameters.tubularSegments,\n\t\tparameters.p,\n\t\tparameters.q,\n\t\tparameters.heightScale\n\t);\n\n};\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed,\n\t\ttaper: taper\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tu, v, r,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// construct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tr = radius * taper( u );\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = r * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\nTHREE.TubeGeometry.prototype.clone = function() {\n\n\treturn new this.constructor( this.parameters.path,\n\t\tthis.parameters.segments, this.parameters.radius, this.parameters.radialSegments,\n\t\tthis.parameters.closed, this.parameters.taper\n\t);\n\n};\n\nTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\treturn 1;\n\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\treturn Math.sin( Math.PI * u );\n\n};\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\tnormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, x1, x2 );\n\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3, materialIndex ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\tvar materialIndex = face.materialIndex;\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ],\n\t\t\t\t\t\tmaterialIndex\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tmaterialIndex\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\nTHREE.PolyhedronGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.PolyhedronGeometry(\n\t\tparameters.vertices,\n\t\tparameters.indices,\n\t\tparameters.radius,\n\t\tparameters.detail\n\t);\n\n};\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t,     0, - r,  t,\n\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t,  0,    - r,  t,  0,\n\t\t r, - t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t,  0, - r,     t,  0, - r,\n\t\t- t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\nTHREE.DodecahedronGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.DodecahedronGeometry(\n\t\tparameters.radius,\n\t\tparameters.detail\n\t);\n\n};\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\nTHREE.IcosahedronGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.IcosahedronGeometry(\n\t\tparameters.radius,\n\t\tparameters.detail\n\t);\n\n};\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\nTHREE.OctahedronGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.OctahedronGeometry(\n\t\tparameters.radius,\n\t\tparameters.detail\n\t);\n\n};\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\nTHREE.TetrahedronGeometry.prototype.clone = function () {\n\n\tvar parameters = this.parameters;\n\n\treturn new THREE.TetrahedronGeometry(\n\t\tparameters.radius,\n\t\tparameters.detail\n\t);\n\n};\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, j, p;\n\tvar u, v;\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n// File:src/extras/geometries/WireframeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeGeometry = function ( geometry ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// Indexed BufferGeometry\n\n\t\t\tvar indices = geometry.index.array;\n\t\t\tvar vertices = geometry.attributes.position;\n\t\t\tvar drawcalls = geometry.drawcalls;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( drawcalls.length === 0 ) {\n\n\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {\n\n\t\t\t\tvar drawcall = drawcalls[ o ];\n\n\t\t\t\tvar start = drawcall.start;\n\t\t\t\tvar count = drawcall.count;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.Geometry();\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\n\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\t\t\n\t\tif ( headLength < length ) {\n\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add( this.line );\n\t\t}\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( headLength < length ){\n\t\tthis.line.scale.set( 1, length - headLength, 1 );\n\t\tthis.line.updateMatrix();\n\t}\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tif ( this.line !== undefined ) this.line.material.color.set( color );\n\tthis.cone.material.color.set( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object ) {\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = ( function () {\n\n\tvar box = new THREE.Box3();\n\n\treturn function ( object ) {\n\n\t\tbox.setFromObject( object );\n\n\t\tif ( box.empty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n} )();\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tthis.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function () {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tsize = size || 1;\n\n\tvar geometry = new THREE.Geometry();\n\tgeometry.vertices.push(\n\t\tnew THREE.Vector3( - size,   size, 0 ),\n\t\tnew THREE.Vector3(   size,   size, 0 ),\n\t\tnew THREE.Vector3(   size, - size, 0 ),\n\t\tnew THREE.Vector3( - size, - size, 0 ),\n\t\tnew THREE.Vector3( - size,   size, 0 )\n\t);\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tthis.lightPlane = new THREE.Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new THREE.Geometry();\n\tgeometry.vertices.push(\n\t\tnew THREE.Vector3(),\n\t\tnew THREE.Vector3()\n\t);\n\n\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tthis.targetLine = new THREE.Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tthis.lightPlane.lookAt( v3 );\n\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\n\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @param object THREE.Mesh whose geometry will be used\n * @param hex line color\n * @param thresholdAngle the minimum angle (in degrees),\n * between the face normals of adjacent faces,\n * that is required to render an edge. A value of 10 means\n * an edge is only rendered if the angle is at least 10 degrees.\n */\n\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n}() );\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tthis.color1 = new THREE.Color( 0x444444 );\n\tthis.color2 = new THREE.Color( 0x888888 );\n\n\tfor ( var i = - size; i <= size; i += step ) {\n\n\t\tgeometry.vertices.push(\n\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\n\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\n\t\t);\n\n\t\tvar color = i === 0 ? this.color1 : this.color2;\n\n\t\tgeometry.colors.push( color, color, color, color );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\n\n\tthis.color1.set( colorCenterLine );\n\tthis.color2.set( colorGrid );\n\n\tthis.geometry.colorsNeedUpdate = true;\n\n};\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t}\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dynamic = true;\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\n\n\tgeometry.translate( 0, - 0.5, 0 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tthis.cone = new THREE.Mesh( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n}() );\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstart: start,\n\t\tend: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t} else {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t}\n\n\t}\n\n};\n\n"],"sourceRoot":"/source/"}